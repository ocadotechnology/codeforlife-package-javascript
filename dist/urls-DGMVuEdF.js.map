{"version":3,"file":"urls-DGMVuEdF.js","sources":["../src/settings/custom.ts","../src/settings/index.ts","../src/slices/createSlice.ts","../src/slices/session.ts","../src/utils/general.ts","../src/components/SyncError.tsx","../src/utils/api.tsx","../src/api/urls.ts"],"sourcesContent":["/**\n * This file contains all of our custom settings we define for our own purposes.\n *\n * This file is based on:\n * https://github.com/ocadotechnology/codeforlife-package-python/blob/main/codeforlife/settings/custom.py\n */\n\n// Shorthand to access environment variables.\nconst env = import.meta.env as Record<string, string | undefined>\n\n// The name of the current service.\nexport const SERVICE_NAME = env.VITE_SERVICE_NAME ?? \"REPLACE_ME\"\n\n// The api url of the current service.\nexport const SERVICE_API_URL =\n  env.VITE_SERVICE_API_URL ?? \"http://localhost:8000\"\n\n// The names of cookies.\nexport const CSRF_COOKIE_NAME = `${SERVICE_NAME}_csrftoken`\nexport const SESSION_COOKIE_NAME = env.VITE_SESSION_COOKIE_NAME ?? \"session_key\"\nexport const SESSION_METADATA_COOKIE_NAME =\n  env.VITE_SESSION_METADATA_COOKIE_NAME ?? \"session_metadata\"\n","// Shorthand to access environment variables.\nexport default new Proxy(import.meta.env, {\n  get: (target, name: string) => target[`VITE_${name}`] as string,\n}) as Record<string, string>\n\nexport * from \"./custom\"\nexport * from \"./vite\"\n","import { asyncThunkCreator, buildCreateSlice } from \"@reduxjs/toolkit\"\n\n// `buildCreateSlice` allows us to create a slice with async thunks.\nconst createSlice = buildCreateSlice({\n  creators: { asyncThunk: asyncThunkCreator },\n})\n\nexport default createSlice\n","import Cookies from \"js-cookie\"\n\nimport { SESSION_METADATA_COOKIE_NAME } from \"../settings\"\nimport createSlice from \"./createSlice\"\n\nexport interface SessionState {\n  isLoggedIn: boolean\n}\n\nconst initialState: SessionState = {\n  isLoggedIn: Boolean(Cookies.get(SESSION_METADATA_COOKIE_NAME)),\n}\n\nconst sessionSlice = createSlice({\n  name: \"session\",\n  initialState,\n  reducers: create => ({\n    login: create.reducer(state => {\n      state.isLoggedIn = true\n    }),\n    logout: create.reducer(state => {\n      state.isLoggedIn = false\n    }),\n  }),\n  selectors: {\n    selectIsLoggedIn: session => session.isLoggedIn,\n  },\n})\n\nexport default sessionSlice\nexport const { login, logout } = sessionSlice.actions\nexport const { selectIsLoggedIn } = sessionSlice.selectors\n","export type Required<T, K extends keyof T> = { [P in K]-?: T[P] }\nexport type Optional<T, K extends keyof T> = Partial<Pick<T, K>>\nexport type OptionalPropertyNames<T> = {\n  [K in keyof T]-?: {} extends { [P in K]: T[K] } ? K : never\n}[keyof T]\nexport type IsOptional<T, K extends keyof T> =\n  K extends OptionalPropertyNames<T> ? true : false\n\nexport function openInNewTab(url: string, target = \"_blank\"): void {\n  window.open(url, target)\n}\n\nexport function wrap(\n  newFn: {\n    before?: (...args: any[]) => void\n    after?: (...args: any[]) => void\n  },\n  fn?: (...args: any[]) => any,\n): (...args: any[]) => any {\n  return (...args) => {\n    if (newFn.before !== undefined) {\n      newFn.before(...(args as unknown[]))\n    }\n    let value\n    if (fn !== undefined) {\n      value = fn(...(args as unknown[])) as unknown\n    }\n    if (newFn.after !== undefined) {\n      newFn.after(...(args as unknown[]))\n    }\n    return value\n  }\n}\n\nexport function snakeCaseToCamelCase(obj: Record<string, any>): void {\n  Object.entries(obj).forEach(([snakeKey, value]) => {\n    if (typeof value === \"object\") snakeCaseToCamelCase(value as object)\n\n    const camelKey = snakeKey.replace(/_+[a-z]/g, _char =>\n      _char[_char.length - 1].toUpperCase(),\n    )\n\n    delete obj[snakeKey]\n    obj[camelKey] = value as unknown\n  })\n}\n\nexport function camelCaseToSnakeCase(obj: Record<string, any>): void {\n  Object.entries(obj).forEach(([camelKey, value]) => {\n    if (typeof value === \"object\") camelCaseToSnakeCase(value as object)\n\n    const snakeKey = camelKey.replace(\n      /[A-Z]/g,\n      char => `_${char.toLowerCase()}`,\n    )\n\n    delete obj[camelKey]\n    obj[snakeKey] = value as unknown\n  })\n}\n\nexport const MIN_DATE = new Date(0, 0, 0)\n\nexport const COUNTRY_ISO_CODES = [\n  \"AD\",\n  \"AE\",\n  \"AF\",\n  \"AG\",\n  \"AI\",\n  \"AL\",\n  \"AM\",\n  \"AO\",\n  \"AQ\",\n  \"AR\",\n  \"AS\",\n  \"AT\",\n  \"AU\",\n  \"AW\",\n  \"AX\",\n  \"AZ\",\n  \"BA\",\n  \"BB\",\n  \"BD\",\n  \"BE\",\n  \"BF\",\n  \"BG\",\n  \"BH\",\n  \"BI\",\n  \"BJ\",\n  \"BL\",\n  \"BM\",\n  \"BN\",\n  \"BO\",\n  \"BQ\",\n  \"BR\",\n  \"BS\",\n  \"BT\",\n  \"BV\",\n  \"BW\",\n  \"BY\",\n  \"BZ\",\n  \"CA\",\n  \"CC\",\n  \"CD\",\n  \"CF\",\n  \"CG\",\n  \"CH\",\n  \"CI\",\n  \"CK\",\n  \"CL\",\n  \"CM\",\n  \"CN\",\n  \"CO\",\n  \"CR\",\n  \"CU\",\n  \"CV\",\n  \"CW\",\n  \"CX\",\n  \"CY\",\n  \"CZ\",\n  \"DE\",\n  \"DJ\",\n  \"DK\",\n  \"DM\",\n  \"DO\",\n  \"DZ\",\n  \"EC\",\n  \"EE\",\n  \"EG\",\n  \"EH\",\n  \"ER\",\n  \"ES\",\n  \"ET\",\n  \"FI\",\n  \"FJ\",\n  \"FK\",\n  \"FM\",\n  \"FO\",\n  \"FR\",\n  \"GA\",\n  \"GB\",\n  \"GD\",\n  \"GE\",\n  \"GF\",\n  \"GG\",\n  \"GH\",\n  \"GI\",\n  \"GL\",\n  \"GM\",\n  \"GN\",\n  \"GP\",\n  \"GQ\",\n  \"GR\",\n  \"GS\",\n  \"GT\",\n  \"GU\",\n  \"GW\",\n  \"GY\",\n  \"HK\",\n  \"HM\",\n  \"HN\",\n  \"HR\",\n  \"HT\",\n  \"HU\",\n  \"ID\",\n  \"IE\",\n  \"IL\",\n  \"IM\",\n  \"IN\",\n  \"IO\",\n  \"IQ\",\n  \"IR\",\n  \"IS\",\n  \"IT\",\n  \"JE\",\n  \"JM\",\n  \"JO\",\n  \"JP\",\n  \"KE\",\n  \"KG\",\n  \"KH\",\n  \"KI\",\n  \"KM\",\n  \"KN\",\n  \"KP\",\n  \"KR\",\n  \"KW\",\n  \"KY\",\n  \"KZ\",\n  \"LA\",\n  \"LB\",\n  \"LC\",\n  \"LI\",\n  \"LK\",\n  \"LR\",\n  \"LS\",\n  \"LT\",\n  \"LU\",\n  \"LV\",\n  \"LY\",\n  \"MA\",\n  \"MC\",\n  \"MD\",\n  \"ME\",\n  \"MF\",\n  \"MG\",\n  \"MH\",\n  \"MK\",\n  \"ML\",\n  \"MM\",\n  \"MN\",\n  \"MO\",\n  \"MP\",\n  \"MQ\",\n  \"MR\",\n  \"MS\",\n  \"MT\",\n  \"MU\",\n  \"MV\",\n  \"MW\",\n  \"MX\",\n  \"MY\",\n  \"MZ\",\n  \"NA\",\n  \"NC\",\n  \"NE\",\n  \"NF\",\n  \"NG\",\n  \"NI\",\n  \"NL\",\n  \"NO\",\n  \"NP\",\n  \"NR\",\n  \"NU\",\n  \"NZ\",\n  \"OM\",\n  \"PA\",\n  \"PE\",\n  \"PF\",\n  \"PG\",\n  \"PH\",\n  \"PK\",\n  \"PL\",\n  \"PM\",\n  \"PN\",\n  \"PR\",\n  \"PS\",\n  \"PT\",\n  \"PW\",\n  \"PY\",\n  \"QA\",\n  \"RE\",\n  \"RO\",\n  \"RS\",\n  \"RU\",\n  \"RW\",\n  \"SA\",\n  \"SB\",\n  \"SC\",\n  \"SD\",\n  \"SE\",\n  \"SG\",\n  \"SH\",\n  \"SI\",\n  \"SJ\",\n  \"SK\",\n  \"SL\",\n  \"SM\",\n  \"SN\",\n  \"SO\",\n  \"SR\",\n  \"SS\",\n  \"ST\",\n  \"SV\",\n  \"SX\",\n  \"SY\",\n  \"SZ\",\n  \"TC\",\n  \"TD\",\n  \"TF\",\n  \"TG\",\n  \"TH\",\n  \"TJ\",\n  \"TK\",\n  \"TL\",\n  \"TM\",\n  \"TN\",\n  \"TO\",\n  \"TR\",\n  \"TT\",\n  \"TV\",\n  \"TW\",\n  \"TZ\",\n  \"UA\",\n  \"UG\",\n  \"UM\",\n  \"US\",\n  \"UY\",\n  \"UZ\",\n  \"VA\",\n  \"VC\",\n  \"VE\",\n  \"VG\",\n  \"VI\",\n  \"VN\",\n  \"VU\",\n  \"WF\",\n  \"WS\",\n  \"YE\",\n  \"YT\",\n  \"ZA\",\n  \"ZM\",\n  \"ZW\",\n] as const\n\nexport type CountryIsoCodes = (typeof COUNTRY_ISO_CODES)[number]\n\nexport const COUNTRIES = [\n  \"Andorra\",\n  \"United Arab Emirates (the)\",\n  \"Afghanistan\",\n  \"Antigua and Barbuda\",\n  \"Anguilla\",\n  \"Albania\",\n  \"Armenia\",\n  \"Angola\",\n  \"Antarctica\",\n  \"Argentina\",\n  \"American Samoa\",\n  \"Austria\",\n  \"Australia\",\n  \"Aruba\",\n  \"Åland Islands\",\n  \"Azerbaijan\",\n  \"Bosnia and Herzegovina\",\n  \"Barbados\",\n  \"Bangladesh\",\n  \"Belgium\",\n  \"Burkina Faso\",\n  \"Bulgaria\",\n  \"Bahrain\",\n  \"Burundi\",\n  \"Benin\",\n  \"Saint Barthélemy\",\n  \"Bermuda\",\n  \"Brunei Darussalam\",\n  \"Bolivia (Plurinational State of)\",\n  \"Bonaire, Sint Eustatius and Saba\",\n  \"Brazil\",\n  \"Bahamas (the)\",\n  \"Bhutan\",\n  \"Bouvet Island\",\n  \"Botswana\",\n  \"Belarus\",\n  \"Belize\",\n  \"Canada\",\n  \"Cocos (Keeling) Islands (the)\",\n  \"Congo (the Democratic Republic of the)\",\n  \"Central African Republic (the)\",\n  \"Congo (the)\",\n  \"Switzerland\",\n  \"Côte d'Ivoire\",\n  \"Cook Islands (the)\",\n  \"Chile\",\n  \"Cameroon\",\n  \"China\",\n  \"Colombia\",\n  \"Costa Rica\",\n  \"Cuba\",\n  \"Cabo Verde\",\n  \"Curaçao\",\n  \"Christmas Island\",\n  \"Cyprus\",\n  \"Czechia\",\n  \"Germany\",\n  \"Djibouti\",\n  \"Denmark\",\n  \"Dominica\",\n  \"Dominican Republic (the\",\n  \"Algeria\",\n  \"Ecuador\",\n  \"Estonia\",\n  \"Egypt\",\n  \"Western Sahara\",\n  \"Eritrea\",\n  \"Spain\",\n  \"Ethiopia\",\n  \"Finland\",\n  \"Fiji\",\n  \"Falkland Islands (the) [Malvinas]\",\n  \"Micronesia (Federated States of)\",\n  \"Faroe Islands (the)\",\n  \"France\",\n  \"Gabon\",\n  \"United Kingdom of Great Britain and Northern Ireland (the)\",\n  \"Grenada\",\n  \"Georgia\",\n  \"French Guiana\",\n  \"Guernsey\",\n  \"Ghana\",\n  \"Gibraltar\",\n  \"Greenland\",\n  \"Gambia (the)\",\n  \"Guinea\",\n  \"Guadeloupe\",\n  \"Equatorial Guinea\",\n  \"Greece\",\n  \"South Georgia and the South Sandwich Islands\",\n  \"Guatemala\",\n  \"Guam\",\n  \"Guinea-Bissau\",\n  \"Guyana\",\n  \"Hong Kong\",\n  \"Heard Island and McDonald Islands\",\n  \"Honduras\",\n  \"Croatia\",\n  \"Haiti\",\n  \"Hungary\",\n  \"Indonesia\",\n  \"Ireland\",\n  \"Israel\",\n  \"Isle of Man\",\n  \"India\",\n  \"British Indian Ocean Territory (the)\",\n  \"Iraq\",\n  \"Iran (Islamic Republic of)\",\n  \"Iceland\",\n  \"Italy\",\n  \"Jersey\",\n  \"Jamaica\",\n  \"Jordan\",\n  \"Japan\",\n  \"Kenya\",\n  \"Kyrgyzstan\",\n  \"Cambodia\",\n  \"Kiribati\",\n  \"Comoros (the)\",\n  \"Saint Kitts and Nevis\",\n  \"Korea (the Democratic People's Republic of)\",\n  \"Korea (the Republic of)\",\n  \"Kuwait\",\n  \"Cayman Islands (the)\",\n  \"Kazakhstan\",\n  \"Lao People's Democratic Republic (the)\",\n  \"Lebanon\",\n  \"Saint Lucia\",\n  \"Liechtenstein\",\n  \"Sri Lanka\",\n  \"Liberia\",\n  \"Lesotho\",\n  \"Lithuania\",\n  \"Luxembourg\",\n  \"Latvia\",\n  \"Libya\",\n  \"Morocco\",\n  \"Monaco\",\n  \"Moldova (the Republic of)\",\n  \"Montenegro\",\n  \"Saint Martin (French part)\",\n  \"Madagascar\",\n  \"Marshall Islands (the)\",\n  \"Republic of North Macedonia\",\n  \"Mali\",\n  \"Myanmar\",\n  \"Mongolia\",\n  \"Macao\",\n  \"Northern Mariana Islands (the)\",\n  \"Martinique\",\n  \"Mauritania\",\n  \"Montserrat\",\n  \"Malta\",\n  \"Mauritius\",\n  \"Maldives\",\n  \"Malawi\",\n  \"Mexico\",\n  \"Malaysia\",\n  \"Mozambique\",\n  \"Namibia\",\n  \"New Caledonia\",\n  \"Niger (the)\",\n  \"Norfolk Island\",\n  \"Nigeria\",\n  \"Nicaragua\",\n  \"Netherlands (the)\",\n  \"Norway\",\n  \"Nepal\",\n  \"Nauru\",\n  \"Niue\",\n  \"New Zealand\",\n  \"Oman\",\n  \"Panama\",\n  \"Peru\",\n  \"French Polynesia\",\n  \"Papua New Guinea\",\n  \"Philippines (the)\",\n  \"Pakistan\",\n  \"Poland\",\n  \"Saint Pierre and Miquelon\",\n  \"Pitcairn\",\n  \"Puerto Rico\",\n  \"Palestine, State of\",\n  \"Portugal\",\n  \"Palau\",\n  \"Paraguay\",\n  \"Qatar\",\n  \"Réunion\",\n  \"Romania\",\n  \"Serbia\",\n  \"Russian Federation (the)\",\n  \"Rwanda\",\n  \"Saudi Arabia\",\n  \"Solomon Islands\",\n  \"Seychelles\",\n  \"Sudan (the)\",\n  \"Sweden\",\n  \"Singapore\",\n  \"Saint Helena, Ascension and Tristan da Cunha\",\n  \"Slovenia\",\n  \"Svalbard and Jan Mayen\",\n  \"Slovakia\",\n  \"Sierra Leone\",\n  \"San Marino\",\n  \"Senegal\",\n  \"Somalia\",\n  \"Suriname\",\n  \"South Sudan\",\n  \"Sao Tome and Principe\",\n  \"El Salvador\",\n  \"Sint Maarten (Dutch part)\",\n  \"Syrian Arab Republic\",\n  \"Eswatini\",\n  \"Turks and Caicos Islands (the)\",\n  \"Chad\",\n  \"French Southern Territories (the)\",\n  \"Togo\",\n  \"Thailand\",\n  \"Tajikistan\",\n  \"Tokelau\",\n  \"Timor-Leste\",\n  \"Turkmenistan\",\n  \"Tunisia\",\n  \"Tonga\",\n  \"Turkey\",\n  \"Trinidad and Tobago\",\n  \"Tuvalu\",\n  \"Taiwan (Province of China)\",\n  \"Tanzania, United Republic of\",\n  \"Ukraine\",\n  \"Uganda\",\n  \"United States Minor Outlying Islands (the)\",\n  \"United States of America (the)\",\n  \"Uruguay\",\n  \"Uzbekistan\",\n  \"Holy See (the)\",\n  \"Saint Vincent and the Grenadines\",\n  \"Venezuela (Bolivarian Republic of)\",\n  \"Virgin Islands (British)\",\n  \"Virgin Islands (U.S.)\",\n  \"Viet Nam\",\n  \"Vanuatu\",\n  \"Wallis and Futuna\",\n  \"Samoa\",\n  \"Yemen\",\n  \"Mayotte\",\n  \"South Africa\",\n  \"Zambia\",\n  \"Zimbabwe\",\n] as const\n\nexport type Countries = (typeof COUNTRIES)[number]\n\nexport const COUNTRY_ISO_CODE_MAPPING: Record<CountryIsoCodes, Countries> = {\n  AD: \"Andorra\",\n  AE: \"United Arab Emirates (the)\",\n  AF: \"Afghanistan\",\n  AG: \"Antigua and Barbuda\",\n  AI: \"Anguilla\",\n  AL: \"Albania\",\n  AM: \"Armenia\",\n  AO: \"Angola\",\n  AQ: \"Antarctica\",\n  AR: \"Argentina\",\n  AS: \"American Samoa\",\n  AT: \"Austria\",\n  AU: \"Australia\",\n  AW: \"Aruba\",\n  AX: \"Åland Islands\",\n  AZ: \"Azerbaijan\",\n  BA: \"Bosnia and Herzegovina\",\n  BB: \"Barbados\",\n  BD: \"Bangladesh\",\n  BE: \"Belgium\",\n  BF: \"Burkina Faso\",\n  BG: \"Bulgaria\",\n  BH: \"Bahrain\",\n  BI: \"Burundi\",\n  BJ: \"Benin\",\n  BL: \"Saint Barthélemy\",\n  BM: \"Bermuda\",\n  BN: \"Brunei Darussalam\",\n  BO: \"Bolivia (Plurinational State of)\",\n  BQ: \"Bonaire, Sint Eustatius and Saba\",\n  BR: \"Brazil\",\n  BS: \"Bahamas (the)\",\n  BT: \"Bhutan\",\n  BV: \"Bouvet Island\",\n  BW: \"Botswana\",\n  BY: \"Belarus\",\n  BZ: \"Belize\",\n  CA: \"Canada\",\n  CC: \"Cocos (Keeling) Islands (the)\",\n  CD: \"Congo (the Democratic Republic of the)\",\n  CF: \"Central African Republic (the)\",\n  CG: \"Congo (the)\",\n  CH: \"Switzerland\",\n  CI: \"Côte d'Ivoire\",\n  CK: \"Cook Islands (the)\",\n  CL: \"Chile\",\n  CM: \"Cameroon\",\n  CN: \"China\",\n  CO: \"Colombia\",\n  CR: \"Costa Rica\",\n  CU: \"Cuba\",\n  CV: \"Cabo Verde\",\n  CW: \"Curaçao\",\n  CX: \"Christmas Island\",\n  CY: \"Cyprus\",\n  CZ: \"Czechia\",\n  DE: \"Germany\",\n  DJ: \"Djibouti\",\n  DK: \"Denmark\",\n  DM: \"Dominica\",\n  DO: \"Dominican Republic (the\",\n  DZ: \"Algeria\",\n  EC: \"Ecuador\",\n  EE: \"Estonia\",\n  EG: \"Egypt\",\n  EH: \"Western Sahara\",\n  ER: \"Eritrea\",\n  ES: \"Spain\",\n  ET: \"Ethiopia\",\n  FI: \"Finland\",\n  FJ: \"Fiji\",\n  FK: \"Falkland Islands (the) [Malvinas]\",\n  FM: \"Micronesia (Federated States of)\",\n  FO: \"Faroe Islands (the)\",\n  FR: \"France\",\n  GA: \"Gabon\",\n  GB: \"United Kingdom of Great Britain and Northern Ireland (the)\",\n  GD: \"Grenada\",\n  GE: \"Georgia\",\n  GF: \"French Guiana\",\n  GG: \"Guernsey\",\n  GH: \"Ghana\",\n  GI: \"Gibraltar\",\n  GL: \"Greenland\",\n  GM: \"Gambia (the)\",\n  GN: \"Guinea\",\n  GP: \"Guadeloupe\",\n  GQ: \"Equatorial Guinea\",\n  GR: \"Greece\",\n  GS: \"South Georgia and the South Sandwich Islands\",\n  GT: \"Guatemala\",\n  GU: \"Guam\",\n  GW: \"Guinea-Bissau\",\n  GY: \"Guyana\",\n  HK: \"Hong Kong\",\n  HM: \"Heard Island and McDonald Islands\",\n  HN: \"Honduras\",\n  HR: \"Croatia\",\n  HT: \"Haiti\",\n  HU: \"Hungary\",\n  ID: \"Indonesia\",\n  IE: \"Ireland\",\n  IL: \"Israel\",\n  IM: \"Isle of Man\",\n  IN: \"India\",\n  IO: \"British Indian Ocean Territory (the)\",\n  IQ: \"Iraq\",\n  IR: \"Iran (Islamic Republic of)\",\n  IS: \"Iceland\",\n  IT: \"Italy\",\n  JE: \"Jersey\",\n  JM: \"Jamaica\",\n  JO: \"Jordan\",\n  JP: \"Japan\",\n  KE: \"Kenya\",\n  KG: \"Kyrgyzstan\",\n  KH: \"Cambodia\",\n  KI: \"Kiribati\",\n  KM: \"Comoros (the)\",\n  KN: \"Saint Kitts and Nevis\",\n  KP: \"Korea (the Democratic People's Republic of)\",\n  KR: \"Korea (the Republic of)\",\n  KW: \"Kuwait\",\n  KY: \"Cayman Islands (the)\",\n  KZ: \"Kazakhstan\",\n  LA: \"Lao People's Democratic Republic (the)\",\n  LB: \"Lebanon\",\n  LC: \"Saint Lucia\",\n  LI: \"Liechtenstein\",\n  LK: \"Sri Lanka\",\n  LR: \"Liberia\",\n  LS: \"Lesotho\",\n  LT: \"Lithuania\",\n  LU: \"Luxembourg\",\n  LV: \"Latvia\",\n  LY: \"Libya\",\n  MA: \"Morocco\",\n  MC: \"Monaco\",\n  MD: \"Moldova (the Republic of)\",\n  ME: \"Montenegro\",\n  MF: \"Saint Martin (French part)\",\n  MG: \"Madagascar\",\n  MH: \"Marshall Islands (the)\",\n  MK: \"Republic of North Macedonia\",\n  ML: \"Mali\",\n  MM: \"Myanmar\",\n  MN: \"Mongolia\",\n  MO: \"Macao\",\n  MP: \"Northern Mariana Islands (the)\",\n  MQ: \"Martinique\",\n  MR: \"Mauritania\",\n  MS: \"Montserrat\",\n  MT: \"Malta\",\n  MU: \"Mauritius\",\n  MV: \"Maldives\",\n  MW: \"Malawi\",\n  MX: \"Mexico\",\n  MY: \"Malaysia\",\n  MZ: \"Mozambique\",\n  NA: \"Namibia\",\n  NC: \"New Caledonia\",\n  NE: \"Niger (the)\",\n  NF: \"Norfolk Island\",\n  NG: \"Nigeria\",\n  NI: \"Nicaragua\",\n  NL: \"Netherlands (the)\",\n  NO: \"Norway\",\n  NP: \"Nepal\",\n  NR: \"Nauru\",\n  NU: \"Niue\",\n  NZ: \"New Zealand\",\n  OM: \"Oman\",\n  PA: \"Panama\",\n  PE: \"Peru\",\n  PF: \"French Polynesia\",\n  PG: \"Papua New Guinea\",\n  PH: \"Philippines (the)\",\n  PK: \"Pakistan\",\n  PL: \"Poland\",\n  PM: \"Saint Pierre and Miquelon\",\n  PN: \"Pitcairn\",\n  PR: \"Puerto Rico\",\n  PS: \"Palestine, State of\",\n  PT: \"Portugal\",\n  PW: \"Palau\",\n  PY: \"Paraguay\",\n  QA: \"Qatar\",\n  RE: \"Réunion\",\n  RO: \"Romania\",\n  RS: \"Serbia\",\n  RU: \"Russian Federation (the)\",\n  RW: \"Rwanda\",\n  SA: \"Saudi Arabia\",\n  SB: \"Solomon Islands\",\n  SC: \"Seychelles\",\n  SD: \"Sudan (the)\",\n  SE: \"Sweden\",\n  SG: \"Singapore\",\n  SH: \"Saint Helena, Ascension and Tristan da Cunha\",\n  SI: \"Slovenia\",\n  SJ: \"Svalbard and Jan Mayen\",\n  SK: \"Slovakia\",\n  SL: \"Sierra Leone\",\n  SM: \"San Marino\",\n  SN: \"Senegal\",\n  SO: \"Somalia\",\n  SR: \"Suriname\",\n  SS: \"South Sudan\",\n  ST: \"Sao Tome and Principe\",\n  SV: \"El Salvador\",\n  SX: \"Sint Maarten (Dutch part)\",\n  SY: \"Syrian Arab Republic\",\n  SZ: \"Eswatini\",\n  TC: \"Turks and Caicos Islands (the)\",\n  TD: \"Chad\",\n  TF: \"French Southern Territories (the)\",\n  TG: \"Togo\",\n  TH: \"Thailand\",\n  TJ: \"Tajikistan\",\n  TK: \"Tokelau\",\n  TL: \"Timor-Leste\",\n  TM: \"Turkmenistan\",\n  TN: \"Tunisia\",\n  TO: \"Tonga\",\n  TR: \"Turkey\",\n  TT: \"Trinidad and Tobago\",\n  TV: \"Tuvalu\",\n  TW: \"Taiwan (Province of China)\",\n  TZ: \"Tanzania, United Republic of\",\n  UA: \"Ukraine\",\n  UG: \"Uganda\",\n  UM: \"United States Minor Outlying Islands (the)\",\n  US: \"United States of America (the)\",\n  UY: \"Uruguay\",\n  UZ: \"Uzbekistan\",\n  VA: \"Holy See (the)\",\n  VC: \"Saint Vincent and the Grenadines\",\n  VE: \"Venezuela (Bolivarian Republic of)\",\n  VG: \"Virgin Islands (British)\",\n  VI: \"Virgin Islands (U.S.)\",\n  VN: \"Viet Nam\",\n  VU: \"Vanuatu\",\n  WF: \"Wallis and Futuna\",\n  WS: \"Samoa\",\n  YE: \"Yemen\",\n  YT: \"Mayotte\",\n  ZA: \"South Africa\",\n  ZM: \"Zambia\",\n  ZW: \"Zimbabwe\",\n}\n\nexport const UK_COUNTIES = [\n  \"Aberdeen City\",\n  \"Aberdeenshire\",\n  \"Angus\",\n  \"Argyll and Bute\",\n  \"Bedfordshire\",\n  \"Belfast\",\n  \"Belfast Greater\",\n  \"Berkshire\",\n  \"Blaenau Gwent\",\n  \"Bridgend\",\n  \"Buckinghamshire\",\n  \"Caerphilly\",\n  \"Cambridgeshire\",\n  \"Cardiff\",\n  \"Carmarthenshire\",\n  \"Ceredigion\",\n  \"Channel Islands\",\n  \"Cheshire\",\n  \"City of Edinburgh\",\n  \"Clackmannanshire\",\n  \"Conwy\",\n  \"Cornwall\",\n  \"County Antrim\",\n  \"County Armagh\",\n  \"County Down\",\n  \"County Fermanagh\",\n  \"County Londonderry\",\n  \"County Tyrone\",\n  \"County of Bristol\",\n  \"Cumbria\",\n  \"Denbighshire\",\n  \"Derbyshire\",\n  \"Devon\",\n  \"Dorset\",\n  \"Dumfries and Galloway\",\n  \"Dunbartonshire\",\n  \"Dundee City\",\n  \"Durham\",\n  \"East Ayrshire\",\n  \"East Dunbartonshire\",\n  \"East Lothian\",\n  \"East Renfrewshire\",\n  \"East Riding of Yorkshire\",\n  \"East Sussex\",\n  \"Essex\",\n  \"Falkirk\",\n  \"Fife\",\n  \"Flintshire\",\n  \"Glasgow City\",\n  \"Gloucestershire\",\n  \"Greater London\",\n  \"Greater Manchester\",\n  \"Guernsey Channel Islands\",\n  \"Gwynedd\",\n  \"Hampshire\",\n  \"Hereford and Worcester\",\n  \"Herefordshire\",\n  \"Hertfordshire\",\n  \"Highland\",\n  \"Inverclyde\",\n  \"Inverness\",\n  \"Isle of Anglesey\",\n  \"Isle of Barra\",\n  \"Isle of Man\",\n  \"Isle of Wight\",\n  \"Jersey Channel Islands\",\n  \"Kent\",\n  \"Lancashire\",\n  \"Leicestershire\",\n  \"Lincolnshire\",\n  \"Merseyside\",\n  \"Merthyr Tydfil\",\n  \"Midlothian\",\n  \"Monmouthshire\",\n  \"Moray\",\n  \"Neath Port Talbot\",\n  \"Newport\",\n  \"Norfolk\",\n  \"North Ayrshire\",\n  \"North Lanarkshire\",\n  \"North Yorkshire\",\n  \"Northamptonshire\",\n  \"Northumberland\",\n  \"Nottinghamshire\",\n  \"Orkney\",\n  \"Orkney Islands\",\n  \"Oxfordshire\",\n  \"Pembrokeshire\",\n  \"Perth and Kinross\",\n  \"Powys\",\n  \"Renfrewshire\",\n  \"Rhondda Cynon Taff\",\n  \"Rutland\",\n  \"Scottish Borders\",\n  \"Shetland Islands\",\n  \"Shropshire\",\n  \"Somerset\",\n  \"South Ayrshire\",\n  \"South Lanarkshire\",\n  \"South Yorkshire\",\n  \"Staffordshire\",\n  \"Stirling\",\n  \"Suffolk\",\n  \"Surrey\",\n  \"Swansea\",\n  \"Torfaen\",\n  \"Tyne and Wear\",\n  \"Vale of Glamorgan\",\n  \"Warwickshire\",\n  \"West Dunbart\",\n  \"West Lothian\",\n  \"West Midlands\",\n  \"West Sussex\",\n  \"West Yorkshire\",\n  \"Western Isles\",\n  \"Wiltshire\",\n  \"Worcestershire\",\n  \"Wrexham\",\n] as const\n\nexport type UkCounties = (typeof UK_COUNTIES)[number]\n\nexport function getNestedProperty(\n  obj: Record<string, any>,\n  dotPath: string | string[],\n): any {\n  if (typeof dotPath === \"string\") dotPath = dotPath.split(\".\")\n\n  let value: unknown = obj\n  for (let i = 0; i < dotPath.length; i++) {\n    value = (value as Record<string, any>)[dotPath[i]]\n    if (\n      i !== dotPath.length - 1 &&\n      (typeof value !== \"object\" || value === null)\n    )\n      return\n  }\n\n  return value\n}\n\nexport function withKeyPaths(obj: object, delimiter: string = \".\"): object {\n  function _withKeyPaths(obj: object, path: string[]) {\n    return Object.fromEntries(\n      Object.entries(obj).map(([key, value]) => {\n        const _path = [...path, key]\n\n        if (typeof value === \"object\" && value !== null)\n          value = _withKeyPaths(value as object, _path)\n\n        return [_path.join(delimiter), value]\n      }),\n    )\n  }\n\n  return _withKeyPaths(obj, [])\n}\n\nexport function getKeyPaths(obj: object, delimiter: string = \".\"): string[] {\n  function _getKeyPaths(obj: object, path: string[]): string[] {\n    return Object.entries(obj)\n      .map(([key, value]) => {\n        const _path = [...path, key]\n        const keyPath = _path.join(delimiter)\n\n        return typeof value === \"object\" && value !== null\n          ? [keyPath, ..._getKeyPaths(value as object, _path)]\n          : [keyPath]\n      })\n      .flat()\n  }\n\n  return _getKeyPaths(obj, [])\n}\n\nexport function excludeKeyPaths(\n  obj: object,\n  exclude: string[],\n  delimiter: string = \".\",\n): any {\n  function _excludeKeyPaths(obj: object, path: string[]) {\n    return Object.fromEntries(\n      Object.entries(obj)\n        .map(([key, value]: [string, unknown]) => {\n          const _path = [...path, key]\n\n          if (\n            typeof value === \"object\" &&\n            value !== null &&\n            !(value instanceof Date)\n          )\n            value = _excludeKeyPaths(value, _path)\n\n          return exclude.includes(_path.join(delimiter)) ? [] : [key, value]\n        })\n        .filter(entry => entry.length),\n    ) as object\n  }\n\n  return exclude.length ? _excludeKeyPaths(obj, []) : obj\n}\n\nexport function generateSecureRandomString(\n  length: number,\n  charSet: string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n) {\n  // Create an array of 32-bit unsigned integers\n  const randomValues = window.crypto.getRandomValues(new Uint8Array(length))\n\n  // Map the random values to characters from our string\n  let result = \"\"\n  for (let i = 0; i < length; i++) {\n    result += charSet.charAt(randomValues[i] % charSet.length)\n  }\n\n  return result\n}\n","import { Stack, Typography } from \"@mui/material\"\nimport { type FC } from \"react\"\nimport { SyncProblem as SyncProblemIcon } from \"@mui/icons-material\"\n\nexport interface SyncErrorProps {}\n\nconst SyncError: FC<SyncErrorProps> = () => (\n  <Stack alignItems=\"center\" alignContent=\"center\">\n    <SyncProblemIcon color=\"error\" />\n    <Typography color=\"error.main\">Failed to sync data</Typography>\n  </Stack>\n)\n\nexport default SyncError\n","import type {\n  FetchBaseQueryError,\n  TypedUseMutationResult,\n  TypedUseQueryHookResult,\n  TypedUseQueryStateResult,\n} from \"@reduxjs/toolkit/query/react\"\nimport { CircularProgress } from \"@mui/material\"\nimport { type ReactNode } from \"react\"\n\nimport { type Optional, type Required, getNestedProperty } from \"./general\"\nimport { type SchemaMap } from \"./schema\"\nimport SyncError from \"../components/SyncError\"\n\n// -----------------------------------------------------------------------------\n// Model Types\n// -----------------------------------------------------------------------------\n\n// The fields of a model.\nexport type Fields = Record<string, unknown>\n\nexport interface Tag<Type extends string> {\n  type: Type\n  id: string\n}\n\nexport type ModelId = string | number\n\n/**\n * A data model.\n *  Id: The type of Id.\n *  Data: The data fields.\n */\nexport type Model<Id extends ModelId, MFields extends Fields = Fields> = {\n  id: Id\n} & Omit<MFields, \"id\">\n\nexport type Schemas<M extends Model<any>> = {\n  [K in keyof M]-?: SchemaMap<M[K]>\n}\n\nexport type Result<\n  M extends Model<any>,\n  MFields extends keyof Omit<M, \"id\"> = never,\n> = Pick<M, \"id\" | MFields>\n\nexport type Arg<\n  M extends Model<any>,\n  RequiredFields extends keyof Omit<M, \"id\">,\n  OptionalFields extends keyof Omit<M, \"id\" | RequiredFields> = never,\n> = Required<M, RequiredFields> & Optional<M, OptionalFields>\n\n// -----------------------------------------------------------------------------\n// CRUD Types\n// https://www.django-rest-framework.org/api-guide/viewsets/#viewset-actions\n// -----------------------------------------------------------------------------\n\n// Create\n\nexport type CreateResult<\n  M extends Model<any>,\n  MFields extends keyof Omit<M, \"id\"> = never,\n> = Result<M, MFields>\n\nexport type CreateArg<\n  M extends Model<any>,\n  RequiredFields extends keyof Omit<M, \"id\">,\n  OptionalFields extends keyof Omit<M, \"id\" | RequiredFields> = never,\n> = Arg<M, RequiredFields, OptionalFields>\n\nexport type BulkCreateResult<\n  M extends Model<any>,\n  MFields extends keyof Omit<M, \"id\"> = never,\n  ExtraFields extends Fields = Fields,\n> = Array<Result<M, MFields> & ExtraFields>\n\nexport type BulkCreateArg<\n  M extends Model<any>,\n  RequiredFields extends keyof Omit<M, \"id\">,\n  OptionalFields extends keyof Omit<M, \"id\" | RequiredFields> = never,\n  ExtraFields extends Fields = Fields,\n> = Array<Arg<M, RequiredFields, OptionalFields> & ExtraFields>\n\n// Read\n\nexport type RetrieveResult<\n  M extends Model<any>,\n  MFields extends keyof Omit<M, \"id\"> = never,\n> = Result<M, MFields>\n\nexport type RetrieveArg<M extends Model<any>> = M[\"id\"]\n\nexport interface ListResult<\n  M extends Model<any>,\n  MFields extends keyof Omit<M, \"id\"> = never,\n  ExtraFields extends Fields = Fields,\n> {\n  count: number\n  offset: number\n  limit: number\n  max_limit: number\n  data: Array<Result<M, MFields> & ExtraFields>\n}\n\nexport type ListArg<Filters extends Fields = Fields> = {\n  limit: number\n  offset: number\n} & Partial<Omit<Filters, \"limit\" | \"offset\">>\n\n// Update\n\nexport type UpdateResult<\n  M extends Model<any>,\n  MFields extends keyof Omit<M, \"id\"> = never,\n> = Result<M, MFields>\n\ntype UpdateWithBody<\n  M extends Model<any>,\n  RequiredFields extends keyof Omit<M, \"id\">,\n  OptionalFields extends keyof Omit<M, \"id\" | RequiredFields>,\n> = Pick<M, \"id\"> & Arg<M, RequiredFields, OptionalFields>\n\n// NOTE: Sometimes update does not require a body. For example, if calling the\n// \"refresh\" action on an invitation object updates the expiry date to be 24\n// hours from now. In this case, you only need to pass the ID of the object.\nexport type UpdateArg<\n  M extends Model<any>,\n  RequiredFields extends keyof Omit<M, \"id\"> = never,\n  OptionalFields extends keyof Omit<M, \"id\" | RequiredFields> = never,\n> = [RequiredFields] extends [never]\n  ? [OptionalFields] extends [never]\n    ? M[\"id\"]\n    : UpdateWithBody<M, RequiredFields, OptionalFields>\n  : UpdateWithBody<M, RequiredFields, OptionalFields>\n\nexport type BulkUpdateResult<\n  M extends Model<any>,\n  MFields extends keyof Omit<M, \"id\"> = never,\n  ExtraFields extends Fields = Fields,\n> = Array<Result<M, MFields> & ExtraFields>\n\nexport type BulkUpdateArg<\n  M extends Model<any>,\n  RequiredFields extends keyof Omit<M, \"id\">,\n  OptionalFields extends keyof Omit<M, \"id\" | RequiredFields> = never,\n  ExtraFields extends Fields = Fields,\n> = Record<M[\"id\"], Arg<M, RequiredFields, OptionalFields> & ExtraFields>\n\n// Delete\n\nexport type DestroyResult = null\n\nexport type DestroyArg<M extends Model<any>> = M[\"id\"]\n\nexport type BulkDestroyResult = null\n\nexport type BulkDestroyArg<M extends Model<any>> = Array<M[\"id\"]>\n\n// -----------------------------------------------------------------------------\n// Functions\n// -----------------------------------------------------------------------------\n\nexport function buildUrl(\n  url: string,\n  params: {\n    search?: Fields\n    url?: Fields\n  },\n): string {\n  if (params.url) {\n    Object.entries(params.url).forEach(([key, value]) => {\n      url = url.replace(`<${key}>`, String(value))\n    })\n  }\n\n  if (params.search) {\n    const searchParams: string[][] = []\n    for (const key in params.search) {\n      const values = params.search[key]\n      if (values === undefined) continue\n\n      if (Array.isArray(values)) {\n        for (const value of values) searchParams.push([key, String(value)])\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-base-to-string\n        searchParams.push([key, String(values)])\n      }\n    }\n\n    if (searchParams.length !== 0) {\n      url += `?${new URLSearchParams(searchParams).toString()}`\n    }\n  }\n\n  return url\n}\n\nexport function isModelId(value: unknown): boolean {\n  return typeof value === \"number\" || typeof value === \"string\"\n}\n\nexport function listTag<Type extends string>(type: Type): Tag<Type> {\n  return { type, id: \"LIST\" }\n}\n\nexport type TagDataOptions = Partial<{\n  includeListTag: boolean\n  argKeysAreIds: boolean\n  id: string\n}>\n\nexport function tagData<Type extends string, M extends Model<any>>(\n  type: Type,\n  options?: TagDataOptions,\n): (\n  result:\n    | Result<M, any>\n    | Array<Result<M, any>>\n    | ListResult<M, any>\n    | null\n    | undefined,\n  error: FetchBaseQueryError | undefined,\n  arg:\n    | Arg<M, any>\n    | Array<Arg<M, any>>\n    | Record<M[\"id\"], Arg<M, any>>\n    | ListArg<any>\n    | Array<M[\"id\"]>\n    | string\n    | number\n    | undefined,\n) => Array<Tag<Type>> {\n  const {\n    includeListTag = false,\n    argKeysAreIds = false,\n    id = \"id\",\n  } = options || {}\n\n  function tags(\n    ids: ModelId[],\n    list: boolean = includeListTag,\n  ): Array<Tag<Type>> {\n    const tags = ids.map(id => ({ type, id: String(id) }))\n    if (list) tags.push(listTag(type))\n    return tags\n  }\n\n  function getModelId(result: Result<M, any>) {\n    return getNestedProperty(result, id) as ModelId\n  }\n\n  return (result, error, arg) => {\n    if (!error) {\n      if (arg) {\n        // The argument is an ID.\n        if (isModelId(arg)) return tags([arg as ModelId])\n\n        // The argument is an array of IDs.\n        if (Array.isArray(arg)) {\n          if (arg.length && isModelId(arg[0])) {\n            return tags(arg as Array<M[\"id\"]>)\n          }\n        }\n        // The argument is an object that contains the id field.\n        else if (typeof arg === \"object\" && argKeysAreIds) {\n          return tags(Object.keys(arg as Record<M[\"id\"], any>))\n        }\n      }\n\n      if (result) {\n        // The result is an array of models that contain the id field.\n        if (Array.isArray(result)) {\n          return tags(result.map(getModelId))\n        }\n\n        // The result is a model that contains the id field.\n        if (getModelId(result as Result<M, any>) !== undefined) {\n          return tags([getModelId(result as Result<M, any>)])\n        }\n\n        // The result is a list that contains an array of models that contain\n        // the id field.\n        return tags((result as ListResult<M, any>).data.map(getModelId), true)\n      }\n    }\n\n    return tags([])\n  }\n}\n\nexport function modelUrls(list: string, detail: string) {\n  if (list === detail) throw Error(\"List and detail are the same.\")\n\n  return { list, detail }\n}\n\nexport type HandleQueryStateOptions = Partial<{\n  loading: ReactNode\n  error: ReactNode\n}>\n\nexport function handleResultState<QueryArg, ResultType>(\n  result:\n    | TypedUseQueryHookResult<ResultType, QueryArg, any>\n    | TypedUseQueryStateResult<ResultType, QueryArg, any>\n    | TypedUseMutationResult<ResultType, QueryArg, any>,\n  children: (data: NonNullable<ResultType>) => ReactNode,\n  options?: HandleQueryStateOptions,\n): ReactNode {\n  const { data, isLoading, isSuccess } = result\n  const error = result.error as string | undefined\n\n  const {\n    loading: loadingNode = <CircularProgress />,\n    error: errorNode = <SyncError />,\n  } = options || {}\n\n  // An error occurred.\n  if (error) {\n    console.error(error)\n    return errorNode\n  }\n\n  // Busy calling the API.\n  if (isLoading) return loadingNode\n\n  // Called the API and got data.\n  if (data) return children(data)\n\n  // Called the API and did not get data.\n  if (isSuccess) throw Error(\"Expected to get data from API but got nothing.\")\n\n  // Have yet to call the API.\n  return loadingNode\n}\n\nexport function isSafeHttpMethod(method: string) {\n  // https://datatracker.ietf.org/doc/html/rfc9110.html#section-9.2.1\n  return [\"GET\", \"HEAD\", \"OPTIONS\", \"TRACE\"].includes(method.toUpperCase())\n}\n","import { modelUrls } from \"../utils/api\"\n\nconst urls = {\n  user: modelUrls(\"users/\", \"users/<id>/\"),\n  teacher: modelUrls(\"users/teachers/\", \"users/teachers/<id>/\"),\n  student: modelUrls(\"users/students/\", \"users/students/<id>/\"),\n  school: modelUrls(\"schools/\", \"schools/<id>/\"),\n  class: modelUrls(\"classes/\", \"classes/<id>/\"),\n  otpBypassToken: modelUrls(\"otp-bypass-tokens/\", \"otp-bypass-tokens/<id>/\"),\n  authFactor: modelUrls(\"auth-factors/\", \"auth-factors/<id>/\"),\n}\n\nexport default urls\n"],"names":["env","__vite_import_meta_env__","SERVICE_NAME","SERVICE_API_URL","CSRF_COOKIE_NAME","SESSION_COOKIE_NAME","SESSION_METADATA_COOKIE_NAME","index","target","name","createSlice","buildCreateSlice","asyncThunkCreator","initialState","Cookies","sessionSlice","create","state","session","login","logout","selectIsLoggedIn","openInNewTab","url","wrap","newFn","fn","args","value","snakeCaseToCamelCase","obj","snakeKey","camelKey","_char","camelCaseToSnakeCase","char","MIN_DATE","COUNTRY_ISO_CODES","COUNTRIES","COUNTRY_ISO_CODE_MAPPING","UK_COUNTIES","getNestedProperty","dotPath","withKeyPaths","delimiter","_withKeyPaths","path","key","_path","getKeyPaths","_getKeyPaths","keyPath","excludeKeyPaths","exclude","_excludeKeyPaths","entry","generateSecureRandomString","length","charSet","randomValues","result","i","SyncError","jsxs","Stack","jsx","SyncProblemIcon","Typography","buildUrl","params","searchParams","values","isModelId","listTag","type","tagData","options","includeListTag","argKeysAreIds","id","tags","ids","list","getModelId","error","arg","modelUrls","detail","handleResultState","children","data","isLoading","isSuccess","loadingNode","CircularProgress","errorNode","isSafeHttpMethod","method","urls"],"mappings":"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"}
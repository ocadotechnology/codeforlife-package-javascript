{"version":3,"file":"schema.es.js","sources":["../../src/utils/schema.ts"],"sourcesContent":["import {\n  type AnyObject,\n  type BooleanSchema,\n  type DateSchema,\n  type DefaultFromShape,\n  type Flags,\n  type InferType,\n  type MakePartial,\n  type NumberSchema,\n  type ObjectSchema,\n  type ObjectShape,\n  type Schema,\n  type StringSchema,\n  type TypeFromShape,\n  type ValidateOptions,\n  ValidationError,\n  number as YupNumber,\n  string as YupString,\n} from \"yup\"\n\nexport type _<T> = T extends {}\n  ? {\n      [k in keyof T]: T[k]\n    }\n  : T\n\nexport type MakeKeysOptional<T> = T extends AnyObject ? _<MakePartial<T>> : T\n\nexport type ObjectFromShape<Shape extends ObjectShape> = MakeKeysOptional<\n  _<TypeFromShape<Shape, AnyObject>>\n>\n\nexport type ObjectSchemaFromShape<Shape extends ObjectShape> = ObjectSchema<\n  _<TypeFromShape<Shape, AnyObject>>,\n  AnyObject,\n  _<DefaultFromShape<Shape>>,\n  \"\"\n>\n\nexport type SchemaMap<\n  TType,\n  TContext = AnyObject,\n  TDefault = any,\n  TFlags extends Flags = \"\",\n> =\n  NonNullable<TType> extends string\n    ? StringSchema<\n        // @ts-expect-error type is fine\n        TType extends undefined ? TType | undefined : TType,\n        TContext,\n        TDefault,\n        TFlags\n      >\n    : NonNullable<TType> extends number\n      ? NumberSchema<\n          // @ts-expect-error type is fine\n          TType extends undefined ? TType | undefined : TType,\n          TContext,\n          TDefault,\n          TFlags\n        >\n      : NonNullable<TType> extends boolean\n        ? BooleanSchema<\n            // @ts-expect-error type is fine\n            TType extends undefined ? TType | undefined : TType,\n            TContext,\n            TDefault,\n            TFlags\n          >\n        : NonNullable<TType> extends Date\n          ? DateSchema<\n              // @ts-expect-error type is fine\n              TType extends undefined ? TType | undefined : TType,\n              TContext,\n              TDefault,\n              TFlags\n            >\n          : NonNullable<TType> extends object\n            ? ObjectSchema<\n                // @ts-expect-error type is fine\n                TType extends undefined ? TType | undefined : TType,\n                TContext,\n                TDefault,\n                TFlags\n              >\n            : Schema<TType, TContext, TDefault, TFlags>\n\nexport function numericId(schema: NumberSchema = YupNumber()) {\n  return schema.min(1)\n}\n\n// -----------------------------------------------------------------------------\n// Limited Character Sets\n// -----------------------------------------------------------------------------\n\nexport type MatchesCharSetOptions = Partial<{\n  schema: StringSchema\n  flags: string\n}>\n\nexport function matchesCharSet(\n  charSet: string,\n  message: string,\n  options: MatchesCharSetOptions = {},\n) {\n  const { schema = YupString(), flags } = options\n\n  return schema.matches(new RegExp(`^[${charSet}]*$`, flags), message)\n}\n\nexport type BuildCharSetOptions = MatchesCharSetOptions &\n  Partial<{ spaces: boolean; specialChars: string }>\n\nexport function buildCharSet(\n  charSet: string,\n  description: string,\n  options: BuildCharSetOptions = {},\n) {\n  const { spaces = false, specialChars, ...matchesCharSetOptions } = options\n\n  let message = `can only contain: ${description}`\n\n  if (spaces) {\n    charSet += \" \"\n    message += \", spaces\"\n  }\n  if (specialChars) {\n    charSet += specialChars\n    message += `, special characters (${specialChars})`\n  }\n\n  return matchesCharSet(charSet, message, matchesCharSetOptions)\n}\n\nexport function buildUnicodeCharSet(\n  charSet: string,\n  description: string,\n  options: BuildCharSetOptions = {},\n) {\n  let { flags = \"u\" } = options\n\n  if (!flags.includes(\"u\")) flags += \"u\"\n\n  return buildCharSet(charSet, description, { ...options, flags })\n}\n\nexport function asciiAlphaString(options?: BuildCharSetOptions) {\n  return buildCharSet(\"a-zA-Z\", \"ASCII alpha characters (a-z, A-Z)\", options)\n}\n\nexport function lowercaseAsciiAlphaString(options?: BuildCharSetOptions) {\n  return buildCharSet(\"a-z\", \"lowercase ASCII alpha characters (a-z)\", options)\n}\n\nexport function uppercaseAsciiAlphaString(options?: BuildCharSetOptions) {\n  return buildCharSet(\"A-Z\", \"uppercase ASCII alpha characters (A-Z)\", options)\n}\n\nexport function asciiNumericString(options?: BuildCharSetOptions) {\n  return buildCharSet(\"0-9\", \"ASCII numbers (0-9)\", options)\n}\n\nexport function asciiAlphanumericString(options?: BuildCharSetOptions) {\n  return buildCharSet(\n    \"a-zA-Z0-9\",\n    \"ASCII alphanumeric characters (a-z, A-Z, 0-9)\",\n    options,\n  )\n}\n\nexport function lowercaseAsciiAlphanumericString(\n  options?: BuildCharSetOptions,\n) {\n  return buildCharSet(\n    \"a-z0-9\",\n    \"lowercase ASCII alphanumeric characters (a-z, 0-9)\",\n    options,\n  )\n}\n\nexport function uppercaseAsciiAlphanumericString(\n  options?: BuildCharSetOptions,\n) {\n  return buildCharSet(\n    \"A-Z0-9\",\n    \"uppercase ASCII alphanumeric characters (A-Z, 0-9)\",\n    options,\n  )\n}\n\nexport function unicodeAlphaString(options?: BuildCharSetOptions) {\n  return buildUnicodeCharSet(\"\\\\p{L}\", \"unicode alpha characters\", options)\n}\n\nexport function lowercaseUnicodeAlphaString(options?: BuildCharSetOptions) {\n  return buildUnicodeCharSet(\n    \"\\\\p{Ll}\",\n    \"lowercase unicode alpha characters\",\n    options,\n  )\n}\n\nexport function uppercaseUnicodeAlphaString(options?: BuildCharSetOptions) {\n  return buildUnicodeCharSet(\n    \"\\\\p{Lu}\",\n    \"uppercase unicode alpha characters\",\n    options,\n  )\n}\n\nexport function unicodeNumericString(options?: BuildCharSetOptions) {\n  return buildUnicodeCharSet(\"\\\\p{N}\", \"unicode numbers\", options)\n}\n\nexport function unicodeAlphanumericString(options?: BuildCharSetOptions) {\n  return buildUnicodeCharSet(\n    \"\\\\p{L}\\\\p{N}\",\n    \"unicode alphanumeric characters\",\n    options,\n  )\n}\n\nexport function lowercaseUnicodeAlphanumericString(\n  options?: BuildCharSetOptions,\n) {\n  return buildUnicodeCharSet(\n    \"\\\\p{Ll}\\\\p{N}\",\n    \"lowercase unicode alphanumeric characters\",\n    options,\n  )\n}\n\nexport function uppercaseUnicodeAlphanumericString(\n  options?: BuildCharSetOptions,\n) {\n  return buildUnicodeCharSet(\n    \"\\\\p{Lu}\\\\p{N}\",\n    \"uppercase unicode alphanumeric characters\",\n    options,\n  )\n}\n\n// -----------------------------------------------------------------------------\n// Try Validate Sync\n// -----------------------------------------------------------------------------\n\nexport type TryValidateSyncOnErrorRT<S extends Schema> = InferType<S> | void\n\nexport type TryValidateSyncRT<\n  S extends Schema,\n  OnErrorRT extends TryValidateSyncOnErrorRT<S>,\n> = OnErrorRT extends InferType<S> ? InferType<S> : InferType<S> | undefined\n\nexport type TryValidateSyncOptions<\n  S extends Schema,\n  OnErrorRT extends TryValidateSyncOnErrorRT<S>,\n> = ValidateOptions & {\n  onError?: (error: ValidationError) => OnErrorRT\n}\n\nexport function tryValidateSync<S extends Schema>(\n  value: any,\n  schema: S,\n  options?: ValidateOptions,\n): InferType<S> | undefined\n\nexport function tryValidateSync<\n  S extends Schema,\n  OnErrorRT extends TryValidateSyncOnErrorRT<S>,\n>(\n  value: any,\n  schema: S,\n  options?: ValidateOptions & {\n    onError: (error: ValidationError) => OnErrorRT\n  },\n): TryValidateSyncRT<S, OnErrorRT>\n\nexport function tryValidateSync<\n  S extends Schema,\n  OnErrorRT extends TryValidateSyncOnErrorRT<S>,\n>(value: any, schema: S, options?: TryValidateSyncOptions<S, OnErrorRT>) {\n  const { onError, ...validateOptions } = options || {}\n\n  try {\n    return schema.validateSync(value, validateOptions) as unknown\n  } catch (error) {\n    if (!(error instanceof ValidationError)) throw error\n    else if (onError) return onError(error) as unknown\n  }\n}\n"],"names":["numericId","schema","YupNumber","matchesCharSet","charSet","message","options","YupString","flags","buildCharSet","description","spaces","specialChars","matchesCharSetOptions","buildUnicodeCharSet","asciiAlphaString","lowercaseAsciiAlphaString","uppercaseAsciiAlphaString","asciiNumericString","asciiAlphanumericString","lowercaseAsciiAlphanumericString","uppercaseAsciiAlphanumericString","unicodeAlphaString","lowercaseUnicodeAlphaString","uppercaseUnicodeAlphaString","unicodeNumericString","unicodeAlphanumericString","lowercaseUnicodeAlphanumericString","uppercaseUnicodeAlphanumericString","tryValidateSync","value","onError","validateOptions","error","ValidationError"],"mappings":";AAuFO,SAASA,EAAUC,IAAuBC,KAAa;AAC5D,SAAOD,EAAO,IAAI,CAAC;AACrB;AAWO,SAASE,EACdC,GACAC,GACAC,IAAiC,CAAA,GACjC;AACA,QAAM,EAAE,QAAAL,IAASM,KAAa,OAAAC,MAAUF;AAExC,SAAOL,EAAO,QAAQ,IAAI,OAAO,KAAKG,CAAO,OAAOI,CAAK,GAAGH,CAAO;AACrE;AAKO,SAASI,EACdL,GACAM,GACAJ,IAA+B,CAAA,GAC/B;AACA,QAAM,EAAE,QAAAK,IAAS,IAAO,cAAAC,GAAc,GAAGC,MAA0BP;AAEnE,MAAID,IAAU,qBAAqBK,CAAW;AAE9C,SAAIC,MACFP,KAAW,KACXC,KAAW,aAETO,MACFR,KAAWQ,GACXP,KAAW,yBAAyBO,CAAY,MAG3CT,EAAeC,GAASC,GAASQ,CAAqB;AAC/D;AAEO,SAASC,EACdV,GACAM,GACAJ,IAA+B,CAAA,GAC/B;AACA,MAAI,EAAE,OAAAE,IAAQ,IAAA,IAAQF;AAEtB,SAAKE,EAAM,SAAS,GAAG,MAAGA,KAAS,MAE5BC,EAAaL,GAASM,GAAa,EAAE,GAAGJ,GAAS,OAAAE,GAAO;AACjE;AAEO,SAASO,EAAiBT,GAA+B;AAC9D,SAAOG,EAAa,UAAU,qCAAqCH,CAAO;AAC5E;AAEO,SAASU,EAA0BV,GAA+B;AACvE,SAAOG,EAAa,OAAO,0CAA0CH,CAAO;AAC9E;AAEO,SAASW,EAA0BX,GAA+B;AACvE,SAAOG,EAAa,OAAO,0CAA0CH,CAAO;AAC9E;AAEO,SAASY,EAAmBZ,GAA+B;AAChE,SAAOG,EAAa,OAAO,uBAAuBH,CAAO;AAC3D;AAEO,SAASa,EAAwBb,GAA+B;AACrE,SAAOG;AAAA,IACL;AAAA,IACA;AAAA,IACAH;AAAA,EAAA;AAEJ;AAEO,SAASc,EACdd,GACA;AACA,SAAOG;AAAA,IACL;AAAA,IACA;AAAA,IACAH;AAAA,EAAA;AAEJ;AAEO,SAASe,EACdf,GACA;AACA,SAAOG;AAAA,IACL;AAAA,IACA;AAAA,IACAH;AAAA,EAAA;AAEJ;AAEO,SAASgB,EAAmBhB,GAA+B;AAChE,SAAOQ,EAAoB,UAAU,4BAA4BR,CAAO;AAC1E;AAEO,SAASiB,EAA4BjB,GAA+B;AACzE,SAAOQ;AAAA,IACL;AAAA,IACA;AAAA,IACAR;AAAA,EAAA;AAEJ;AAEO,SAASkB,EAA4BlB,GAA+B;AACzE,SAAOQ;AAAA,IACL;AAAA,IACA;AAAA,IACAR;AAAA,EAAA;AAEJ;AAEO,SAASmB,EAAqBnB,GAA+B;AAClE,SAAOQ,EAAoB,UAAU,mBAAmBR,CAAO;AACjE;AAEO,SAASoB,EAA0BpB,GAA+B;AACvE,SAAOQ;AAAA,IACL;AAAA,IACA;AAAA,IACAR;AAAA,EAAA;AAEJ;AAEO,SAASqB,EACdrB,GACA;AACA,SAAOQ;AAAA,IACL;AAAA,IACA;AAAA,IACAR;AAAA,EAAA;AAEJ;AAEO,SAASsB,EACdtB,GACA;AACA,SAAOQ;AAAA,IACL;AAAA,IACA;AAAA,IACAR;AAAA,EAAA;AAEJ;AAqCO,SAASuB,EAGdC,GAAY7B,GAAWK,GAAgD;AACvE,QAAM,EAAE,SAAAyB,GAAS,GAAGC,EAAA,IAAoB1B,KAAW,CAAA;AAEnD,MAAI;AACF,WAAOL,EAAO,aAAa6B,GAAOE,CAAe;AAAA,EACnD,SAASC,GAAO;AACd,QAAMA,aAAiBC;AAAwB,UACtCH,EAAS,QAAOA,EAAQE,CAAK;AAAA,UADG,OAAMA;AAAA,EAEjD;AACF;"}
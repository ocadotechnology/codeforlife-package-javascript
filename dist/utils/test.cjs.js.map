{"version":3,"file":"test.cjs.js","sources":["../../src/utils/test.tsx"],"sourcesContent":["import type { Middleware, Reducer, Store } from \"@reduxjs/toolkit\"\nimport type { PropsWithChildren, ReactElement } from \"react\"\nimport { type Queries, type queries } from \"@testing-library/dom\"\nimport {\n  type RenderOptions,\n  type RenderResult,\n  render,\n} from \"@testing-library/react\"\nimport {\n  type Container as RendererableContainer,\n  type hydrateRoot,\n} from \"react-dom/client\"\nimport userEvent, { type UserEvent } from \"@testing-library/user-event\"\nimport { Provider } from \"react-redux\"\n\nimport { makeStore } from \"./store\"\n\ntype HydrateableContainer = Parameters<typeof hydrateRoot>[0]\n\ntype RenderWithUserResult<\n  Q extends Queries = typeof queries,\n  Container extends RendererableContainer | HydrateableContainer = HTMLElement,\n  BaseElement extends RendererableContainer | HydrateableContainer = Container,\n> = RenderResult<Q, Container, BaseElement> & { user: UserEvent }\n\nexport function renderWithUser<\n  Q extends Queries = typeof queries,\n  Container extends RendererableContainer | HydrateableContainer = HTMLElement,\n  BaseElement extends RendererableContainer | HydrateableContainer = Container,\n>(\n  ui: ReactElement,\n  renderOptions: RenderOptions<Q, Container, BaseElement> = {},\n): RenderWithUserResult<Q, Container, BaseElement> {\n  return {\n    user: userEvent.setup(),\n    ...render(ui, renderOptions),\n  }\n}\n\n/**\n * Renders the given React element with Redux Provider and custom store.\n * This function is useful for testing components that are connected to the\n * Redux store.\n *\n * @param ui - The React component or element to render.\n * @param reducer - The root reducer to use for the store.\n * @param extendedRenderOptions - Optional configuration options for rendering.\n *  This includes `preloadedState` for initial Redux state and `store` for a\n *  specific Redux store instance. Any additional properties are passed to React\n *  Testing Library's render function.\n * @returns An object containing the Redux store used in the render, User event\n *  API for simulating user interactions in tests, and all of React Testing\n *  Library's query functions for testing the component.\n */\nexport function renderWithStore<\n  R extends Reducer,\n  Q extends Queries = typeof queries,\n  Container extends RendererableContainer | HydrateableContainer = HTMLElement,\n  BaseElement extends RendererableContainer | HydrateableContainer = Container,\n>(\n  ui: ReactElement,\n  reducer: R,\n  extendedRenderOptions: RenderOptions<Q, Container, BaseElement> & {\n    /**\n     * The middlewares used to create the Redux store.\n     */\n    middlewares?: Middleware[]\n\n    /**\n     * Defines a specific portion or the entire initial state for the Redux store.\n     * This is particularly useful for initializing the state in a\n     * controlled manner during testing, allowing components to be rendered\n     * with predetermined state conditions.\n     */\n    preloadedState?: Partial<ReturnType<R>>\n\n    /**\n     * Allows the use of a specific Redux store instance instead of a\n     * default or global store. This flexibility is beneficial when\n     * testing components with unique store requirements or when isolating\n     * tests from a global store state. The custom store should be configured\n     * to match the structure and middleware of the store used by the application.\n     *\n     * @default makeStore({reducer,middlewares,preloadedState})\n     */\n    store?: Store\n  } = {},\n): RenderWithUserResult<Q, Container, BaseElement> & {\n  store: ReturnType<typeof makeStore<R>>\n} {\n  const {\n    middlewares,\n    preloadedState,\n    // Automatically create a store instance if no store was passed in\n    store = makeStore({ reducer, middlewares, preloadedState }),\n    ...renderOptions\n  } = extendedRenderOptions\n\n  const Wrapper = ({ children }: PropsWithChildren) => (\n    <Provider store={store}>{children}</Provider>\n  )\n\n  // Return an object with the store and all of RTL's query functions\n  return {\n    store,\n    user: userEvent.setup(),\n    ...render(ui, { wrapper: Wrapper, ...renderOptions }),\n  }\n}\n"],"names":["renderWithUser","ui","renderOptions","userEvent","render","renderWithStore","reducer","extendedRenderOptions","middlewares","preloadedState","store","makeStore","Wrapper","children","jsx","Provider"],"mappings":"+UAyBO,SAASA,EAKdC,EACAC,EAA0D,GACT,CACjD,MAAO,CACL,KAAMC,EAAU,MAAA,EAChB,GAAGC,EAAAA,OAAOH,EAAIC,CAAa,CAAA,CAE/B,CAiBO,SAASG,EAMdJ,EACAK,EACAC,EAwBI,CAAA,EAGJ,CACA,KAAM,CACJ,YAAAC,EACA,eAAAC,EAEA,MAAAC,EAAQC,EAAAA,UAAU,CAAE,QAAAL,EAAS,YAAAE,EAAa,eAAAC,EAAgB,EAC1D,GAAGP,CAAA,EACDK,EAEEK,EAAU,CAAC,CAAE,SAAAC,CAAA,IACjBC,EAAAA,kBAAAA,IAACC,WAAA,CAAS,MAAAL,EAAe,SAAAG,EAAS,EAIpC,MAAO,CACL,MAAAH,EACA,KAAMP,EAAU,MAAA,EAChB,GAAGC,EAAAA,OAAOH,EAAI,CAAE,QAASW,EAAS,GAAGV,EAAe,CAAA,CAExD"}
{"version":3,"file":"server.cjs.js","sources":["../src/server.ts"],"sourcesContent":["/**\n * Â© Ocado Group\n * Created on 13/12/2024 at 12:15:05(+00:00).\n *\n * A server for an app in a live environment.\n * Based off: https://github.com/bluwy/create-vite-extra/blob/master/template-ssr-react-ts/server.js\n */\n\nimport { Cache, type CacheClass } from \"memory-cache\"\nimport express, { type Express, type Request, type Response } from \"express\"\nimport fs from \"node:fs/promises\"\nimport http from \"node:http\"\n\ntype Mode = \"development\" | \"staging\" | \"production\"\ntype Options = Partial<{\n  mode: Mode\n  port: number\n  base: string\n}>\n\ntype HealthStatus =\n  | \"healthy\"\n  | \"startingUp\"\n  | \"shuttingDown\"\n  | \"unhealthy\"\n  | \"unknown\"\ntype HealthCheck = {\n  healthStatus: HealthStatus\n  additionalInfo: string\n  details?: Array<{\n    name: string\n    description: string\n    health: HealthStatus\n  }>\n}\ntype HealthCheckResponse = {\n  appId: string\n  healthStatus: HealthStatus\n  lastCheckedTimestamp: string\n  additionalInformation: string\n  startupTimestamp: string\n  appVersion: string\n  details: Array<{\n    name: string\n    description: string\n    health: HealthStatus\n  }>\n}\n\ntype Render = (path: string) => Promise<{ head?: string; html?: string }>\ntype EntryModule = { render: Render }\ntype RenderAndTemplate = [Render, string]\ntype GetRenderAndTemplate = (path: string) => Promise<RenderAndTemplate>\ntype OnServeError = (error: Error) => string | undefined\n\nexport default class Server {\n  envIsProduction: boolean\n  templateHtml: string\n  hostname: string\n  mode: Mode\n  port: number\n  base: string\n  app: Express\n  server: http.Server<typeof http.IncomingMessage, typeof http.ServerResponse>\n  cache: CacheClass<string, any>\n  healthCheckCacheKey: string\n  healthCheckCacheTimeout: number\n  healthCheckStatusCodes: Record<HealthStatus, number>\n\n  constructor({ mode, port, base }: Options = {}) {\n    this.envIsProduction = process.env.NODE_ENV === \"production\"\n    this.templateHtml = \"\"\n    this.hostname = this.envIsProduction ? \"0.0.0.0\" : \"127.0.0.1\"\n\n    this.mode = mode || (process.env.MODE as Mode) || \"development\"\n    this.port =\n      port ||\n      (process.env.PORT\n        ? Number(process.env.PORT)\n        : this.envIsProduction\n          ? 8080\n          : 5173)\n    this.base = base || process.env.BASE || \"/\"\n\n    this.app = express()\n    this.server = http.createServer(this.app)\n    this.cache = new Cache()\n\n    this.healthCheckCacheKey = \"health-check\"\n    this.healthCheckCacheTimeout = 30000\n    this.healthCheckStatusCodes = {\n      // The app is running normally.\n      healthy: 200,\n      // The app is performing app-specific initialisation which must\n      // complete before it will serve normal application requests\n      // (perhaps the app is warming a cache or something similar). You\n      // only need to use this status if your app will be in a start-up\n      // mode for a prolonged period of time.\n      startingUp: 503,\n      // The app is shutting down. As with startingUp, you only need to\n      // use this status if your app takes a prolonged amount of time\n      // to shutdown, perhaps because it waits for a long-running\n      // process to complete before shutting down.\n      shuttingDown: 503,\n      // The app is not running normally.\n      unhealthy: 503,\n      // The app is not able to report its own state.\n      unknown: 503,\n    }\n  }\n\n  // @ts-expect-error unused var\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getHealthCheck(request: Request): HealthCheck {\n    return {\n      healthStatus: \"healthy\",\n      additionalInfo: \"All healthy.\",\n    }\n  }\n\n  handleHealthCheck(request: Request, response: Response): void {\n    let value: HealthCheckResponse = this.cache.get(\n      this.healthCheckCacheKey,\n    ) as HealthCheckResponse\n    if (value === null) {\n      const healthCheck = this.getHealthCheck(request)\n\n      if (healthCheck.healthStatus !== \"healthy\") {\n        console.warn(`health check: ${JSON.stringify(healthCheck)}`)\n      }\n\n      value = {\n        appId: process.env.APP_ID || \"REPLACE_ME\",\n        healthStatus: healthCheck.healthStatus,\n        lastCheckedTimestamp: new Date().toISOString(),\n        additionalInformation: healthCheck.additionalInfo,\n        startupTimestamp: new Date().toISOString(),\n        appVersion: process.env.APP_VERSION || \"REPLACE_ME\",\n        details: healthCheck.details || [],\n      }\n\n      this.cache.put(\n        this.healthCheckCacheKey,\n        value,\n        this.healthCheckCacheTimeout,\n      )\n    }\n\n    response.status(this.healthCheckStatusCodes[value.healthStatus]).json(value)\n  }\n\n  async handleServeHtml(\n    request: Request,\n    response: Response,\n    getRenderAndTemplate: GetRenderAndTemplate,\n    onServeError: OnServeError,\n  ): Promise<void> {\n    try {\n      const path = request.originalUrl.replace(this.base, \"\")\n\n      const [render, template] = await getRenderAndTemplate(path)\n\n      const rendered = await render(path)\n\n      const html = template\n        .replace(`<!--app-head-->`, rendered.head ?? \"\")\n        .replace(`<!--app-html-->`, rendered.html ?? \"\")\n\n      response.status(200).set({ \"Content-Type\": \"text/html\" }).send(html)\n    } catch (error) {\n      if (error instanceof Error) {\n        console.error(error.stack)\n        const body = onServeError(error)\n        response.status(500).end(body)\n      }\n    }\n  }\n\n  async run() {\n    this.app.get(\"/health-check\", (request, response) => {\n      this.handleHealthCheck(request, response)\n    })\n\n    let getRenderAndTemplate: GetRenderAndTemplate\n    let onServeError: OnServeError\n    if (this.envIsProduction) {\n      const compression = (await import(\"compression\")).default\n      const sirv = (await import(\"sirv\")).default\n\n      this.templateHtml = await fs.readFile(\"./dist/client/index.html\", \"utf-8\")\n\n      this.app.use(compression())\n      this.app.use(this.base, sirv(\"./dist/client\", { extensions: [] }))\n\n      getRenderAndTemplate = async () => {\n        const render = (\n          (await import(\n            // @ts-expect-error only present after building installing app.\n            \"../../../dist/server/entry-server.js\"\n          )) as EntryModule\n        ).render\n\n        // Use cached template.\n        const template = this.templateHtml\n\n        return [render, template]\n      }\n\n      onServeError = () => undefined\n    } else {\n      const { createServer } = await import(\"vite\")\n\n      const vite = await createServer({\n        server: {\n          middlewareMode: true,\n          hmr: { server: this.server },\n        },\n        appType: \"custom\",\n        base: this.base,\n        mode: this.mode,\n      })\n\n      this.app.use(vite.middlewares)\n\n      getRenderAndTemplate = async path => {\n        const render = (\n          (await vite.ssrLoadModule(\"/src/entry-server.tsx\")) as EntryModule\n        ).render\n\n        // Always read fresh template.\n        let template = await fs.readFile(\"./index.html\", \"utf-8\")\n        template = await vite.transformIndexHtml(path, template)\n\n        return [render, template]\n      }\n\n      onServeError = error => {\n        vite.ssrFixStacktrace(error)\n        return error.stack\n      }\n    }\n\n    this.app.get(\"*\", async (request, response) => {\n      await this.handleServeHtml(\n        request,\n        response,\n        getRenderAndTemplate,\n        onServeError,\n      )\n    })\n\n    this.server.listen(this.port, this.hostname, () => {\n      let startMessage =\n        \"Server started.\\n\" +\n        `url: http://${this.hostname}:${this.port}\\n` +\n        `environment: ${process.env.NODE_ENV}\\n`\n\n      if (!this.envIsProduction) startMessage += `mode: ${this.mode}\\n`\n\n      console.log(startMessage)\n    })\n  }\n}\n"],"names":["Server","mode","port","base","express","http","Cache","request","response","value","healthCheck","getRenderAndTemplate","onServeError","path","render","template","rendered","html","error","body","compression","sirv","fs","createServer","vite","startMessage"],"mappings":"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"}
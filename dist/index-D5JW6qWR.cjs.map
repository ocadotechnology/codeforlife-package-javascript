{"version":3,"file":"index-D5JW6qWR.cjs","sources":["../src/components/page/Section.tsx","../src/components/page/Notification.tsx","../src/components/page/Page.tsx","../src/components/page/Banner.tsx","../src/components/page/TabBar.tsx"],"sourcesContent":["import {\n  Box,\n  type BoxProps,\n  Container,\n  type ContainerProps,\n} from \"@mui/material\"\nimport type { FC } from \"react\"\n\nexport interface SectionProps extends ContainerProps {\n  boxProps?: Omit<BoxProps, \"children\">\n}\n\nconst Section: FC<SectionProps> = ({ boxProps, ...containerProps }) => {\n  return (\n    <Box {...boxProps}>\n      <Container {...containerProps} />\n    </Box>\n  )\n}\n\nexport default Section\n","import {\n  CloseOutlined as CloseOutlinedIcon,\n  ErrorOutline as ErrorOutlineIcon,\n  InfoOutlined as InfoOutlinedIcon,\n} from \"@mui/icons-material\"\nimport { type FC, type ReactNode, useEffect, useState } from \"react\"\nimport { IconButton, Stack, Typography } from \"@mui/material\"\n\nimport Section from \"./Section\"\nimport palette from \"../../theme/palette\"\n\nexport interface NotificationProps {\n  open?: boolean\n  error?: boolean\n  onClose?: () => void\n  children: ReactNode\n  bgcolor?: \"secondary\" | \"tertiary\"\n}\n\nconst Notification: FC<NotificationProps> = ({\n  open = true,\n  error = false,\n  onClose,\n  children,\n  bgcolor = \"secondary\",\n}) => {\n  const [_open, _setOpen] = useState(open)\n\n  useEffect(() => {\n    _setOpen(open)\n  }, [open])\n\n  if (!_open) return <></>\n\n  // @ts-expect-error guaranteed to be in palette\n  const contrastText = palette[bgcolor].contrastText as string\n\n  return (\n    <Section\n      boxProps={{\n        bgcolor: {\n          secondary: \"#ffd23b\",\n          tertiary: \"#08bafc\",\n        }[bgcolor],\n      }}\n      sx={{ paddingY: \"5px\" }}\n    >\n      <Stack direction=\"row\" alignItems=\"center\" gap={2}>\n        {error ? (\n          <ErrorOutlineIcon htmlColor={contrastText} />\n        ) : (\n          <InfoOutlinedIcon htmlColor={contrastText} />\n        )}\n        <Typography variant=\"body2\" color={contrastText} mb={0}>\n          {children}\n        </Typography>\n        <IconButton\n          style={{ marginLeft: \"auto\" }}\n          onClick={() => {\n            _setOpen(false)\n            if (onClose !== undefined) onClose()\n          }}\n        >\n          <CloseOutlinedIcon htmlColor={contrastText} />\n        </IconButton>\n      </Stack>\n    </Section>\n  )\n}\n\nexport default Notification\n","import { Children, type JSX, useEffect } from \"react\"\nimport { type Location, useLocation } from \"react-router-dom\"\n\nimport Notification, { type NotificationProps } from \"./Notification\"\nimport {\n  type SessionMetadata,\n  type UseSessionChildren,\n  type UseSessionChildrenFunction,\n  type UseSessionOptions,\n  useSession,\n} from \"../../hooks/auth\"\n\nexport type PageState = {\n  notifications: Array<{\n    index?: number\n    props: NotificationProps\n  }>\n  scroll: { x: number; y: number }\n}\n\nexport interface PageProps<\n  SessionUserType extends SessionMetadata[\"user_type\"] | undefined,\n> {\n  children: UseSessionChildren<SessionUserType>\n  session?: UseSessionOptions<SessionUserType>\n}\n\nconst Page = <\n  SessionUserType extends SessionMetadata[\"user_type\"] | undefined = undefined,\n>({\n  children,\n  session,\n}: PageProps<SessionUserType>): JSX.Element => {\n  const { state } = useLocation() as Location<null | Partial<PageState>>\n\n  let { scroll, notifications } = state || {}\n  scroll = scroll || { x: 0, y: 0 }\n  notifications = notifications || []\n\n  useEffect(() => {\n    window.scroll(scroll.x, scroll.y)\n  }, [scroll.x, scroll.y])\n\n  return (\n    <>\n      {useSession((metadata?: SessionMetadata) => {\n        if (typeof children === \"function\") {\n          children = metadata\n            ? (children as UseSessionChildrenFunction<true>)(metadata)\n            : (children as UseSessionChildrenFunction<false>)(metadata)\n        }\n\n        if (notifications.length) {\n          const childrenArray = Children.toArray(children)\n\n          notifications.forEach((notification, index) => {\n            void childrenArray.splice(\n              notification.index ?? index,\n              0,\n              <Notification {...notification.props} />,\n            )\n          })\n\n          return childrenArray\n        }\n\n        return children\n      }, session)}\n    </>\n  )\n}\n\nexport default Page\n","import { Stack, Typography } from \"@mui/material\"\n\nimport Image, { type ImageProps } from \"../Image\"\nimport { LinkButton, type LinkButtonProps } from \"../router\"\nimport { primary, secondary, tertiary } from \"../../theme/colors\"\nimport Section from \"./Section\"\nimport palette from \"../../theme/palette\"\n\nexport interface BannerProps<\n  Button1State extends Record<string, any> = Record<string, any>,\n  Button2State extends Record<string, any> = Record<string, any>,\n> {\n  header: string\n  subheader?: string\n  textAlign?: \"start\" | \"center\"\n  imageProps?: ImageProps\n  button1Props?: LinkButtonProps<\"to\", Button1State>\n  button2Props?: LinkButtonProps<\"to\", Button2State>\n  bgcolor?: \"primary\" | \"secondary\" | \"tertiary\"\n}\n\nconst Banner = <\n  Button1State extends Record<string, any> = Record<string, any>,\n  Button2State extends Record<string, any> = Record<string, any>,\n>({\n  header,\n  subheader,\n  textAlign = \"start\",\n  imageProps,\n  button1Props,\n  button2Props,\n  bgcolor = \"primary\",\n}: BannerProps<Button1State, Button2State>) => {\n  // @ts-expect-error guaranteed to be in palette\n  const contrastText = palette[bgcolor].contrastText as string\n\n  return (\n    <Section\n      boxProps={{\n        bgcolor: {\n          primary: primary[500],\n          secondary: secondary[500],\n          tertiary: tertiary[500],\n        }[bgcolor],\n      }}\n      sx={{ paddingY: 0 }}\n    >\n      <Stack\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent={textAlign}\n        gap={2}\n      >\n        <Stack\n          py={{\n            xs: \"80px\",\n            md: imageProps !== undefined ? 0 : \"100px\",\n          }}\n          textAlign={textAlign}\n        >\n          <Typography\n            variant=\"h2\"\n            color={contrastText}\n            mb={subheader !== undefined ? undefined : 0}\n          >\n            {header}\n          </Typography>\n          {subheader !== undefined && (\n            <Typography\n              color={contrastText}\n              variant=\"h4\"\n              mb={button1Props !== undefined ? undefined : 0}\n            >\n              {subheader}\n            </Typography>\n          )}\n          <Stack direction=\"row\" gap={2}>\n            {button1Props !== undefined && <LinkButton {...button1Props} />}\n            {button2Props !== undefined && <LinkButton {...button2Props} />}\n          </Stack>\n        </Stack>\n        {imageProps !== undefined && (\n          <Image\n            {...imageProps}\n            display={{ xs: \"none\", md: \"block\" }}\n            maxWidth=\"320px\"\n            marginLeft=\"auto\"\n          />\n        )}\n      </Stack>\n    </Section>\n  )\n}\n\nexport default Banner\n","import {\n  ChevronLeft as ChevronLeftIcon,\n  ChevronRight as ChevronRightIcon,\n} from \"@mui/icons-material\"\nimport { type FC, type ReactNode, useEffect, useState } from \"react\"\nimport {\n  IconButton,\n  Tab,\n  type TabScrollButtonProps,\n  Tabs,\n  Typography,\n} from \"@mui/material\"\nimport { object as YupObject, string as YupString } from \"yup\"\nimport { generatePath, useNavigate, useParams } from \"react-router-dom\"\n\nimport Section from \"./Section\"\nimport { primary } from \"../../theme/colors\"\nimport { tryValidateSync } from \"../../utils/schema\"\n\nexport interface TabBarProps {\n  header: string\n  tabs: Array<{\n    label: string\n    children: ReactNode\n    path: string\n  }>\n  originalPath: string\n  value?: number\n}\n\nconst TabBar: FC<TabBarProps> = ({ header, tabs, originalPath, value = 0 }) => {\n  const params = useParams()\n  const navigate = useNavigate()\n  const [_value, _setValue] = useState(\n    value < 0 ? 0 : value >= tabs.length ? tabs.length - 1 : value,\n  )\n\n  const labels = tabs.map(tab => tab.label)\n  const children = tabs.map(tab => tab.children)\n  const paths = tabs.map(tab => tab.path)\n\n  useEffect(() => {\n    _setValue(value)\n  }, [value])\n\n  useEffect(() => {\n    const tab = tryValidateSync(\n      params,\n      YupObject({\n        tab: YupString().oneOf(paths).required(),\n      }),\n    )?.tab\n\n    if (tab !== undefined) {\n      _setValue(paths.indexOf(tab))\n    }\n  }, [params, paths])\n\n  return (\n    <>\n      <Section\n        boxProps={{ bgcolor: primary[500] }}\n        sx={{ paddingY: \"100px\" }}\n        className=\"flex-center\"\n      >\n        <Typography\n          textAlign=\"center\"\n          variant=\"h2\"\n          style={{ color: \"white\" }}\n          mb={0}\n        >\n          {header}\n        </Typography>\n      </Section>\n      <Section\n        boxProps={{ bgcolor: primary[300] }}\n        sx={{ paddingY: \"6px\" }}\n        className=\"flex-center\"\n      >\n        <Tabs\n          value={_value}\n          onChange={(_, value: number) => {\n            navigate(\n              generatePath(originalPath, {\n                tab: paths[value],\n              }),\n            )\n          }}\n          ScrollButtonComponent={({\n            disabled,\n            onClick,\n            direction,\n          }: TabScrollButtonProps) => {\n            return (\n              <>\n                {disabled === false && (\n                  <IconButton\n                    onClick={onClick}\n                    style={{\n                      padding: 0,\n                      [direction === \"left\" ? \"marginRight\" : \"marginLeft\"]:\n                        \"15px\",\n                      color: \"white\",\n                    }}\n                  >\n                    {direction === \"left\" ? (\n                      <>\n                        <ChevronLeftIcon />\n                      </>\n                    ) : (\n                      <>\n                        <ChevronRightIcon />\n                      </>\n                    )}\n                  </IconButton>\n                )}\n              </>\n            )\n          }}\n        >\n          {labels.map(label => (\n            <Tab disableRipple key={label} label={label} />\n          ))}\n        </Tabs>\n      </Section>\n      {children[_value]}\n    </>\n  )\n}\n\nexport default TabBar\n"],"names":["Section","boxProps","containerProps","jsx","Box","Container","Notification","open","error","onClose","children","bgcolor","_open","_setOpen","useState","useEffect","Fragment","contrastText","palette","Stack","ErrorOutlineIcon","InfoOutlinedIcon","Typography","IconButton","CloseOutlinedIcon","Page","session","state","useLocation","scroll","notifications","useSession","metadata","childrenArray","Children","notification","index","Banner","header","subheader","textAlign","imageProps","button1Props","button2Props","primary","secondary","tertiary","jsxs","LinkButton","Image","TabBar","tabs","originalPath","value","params","useParams","navigate","useNavigate","_value","_setValue","labels","tab","paths","tryValidateSync","YupObject","YupString","Tabs","_","generatePath","disabled","onClick","direction","ChevronLeftIcon","ChevronRightIcon","label","Tab"],"mappings":"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"}
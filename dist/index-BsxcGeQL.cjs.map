{"version":3,"file":"index-BsxcGeQL.cjs","sources":["../src/components/form/ApiAutocompleteField.tsx","../src/components/form/AutocompleteField.tsx","../src/components/form/CheckboxField.tsx","../src/components/form/CountryField.tsx","../src/components/form/DatePickerField.tsx","../src/components/form/TextField.tsx","../src/components/form/EmailField.tsx","../src/components/form/FirstNameField.tsx","../src/components/form/Form.tsx","../src/components/form/OtpField.tsx","../src/components/form/RepeatField.tsx","../src/components/form/PasswordField.tsx","../src/components/form/SubmitButton.tsx","../src/components/form/UkCountyField.tsx"],"sourcesContent":["import { Button, type ChipTypeMap, CircularProgress } from \"@mui/material\"\nimport {\n  Children,\n  type ElementType,\n  type ForwardRefRenderFunction,\n  type HTMLAttributes,\n  type JSX,\n  forwardRef,\n  useEffect,\n  useState,\n} from \"react\"\nimport type { TypedUseLazyQuery } from \"@reduxjs/toolkit/query/react\"\n\nimport {\n  AutocompleteField,\n  type AutocompleteFieldProps,\n} from \"../../components/form\"\nimport type { ListArg, ListResult, ModelId } from \"../../utils/api\"\nimport SyncError from \"../SyncError\"\nimport { usePagination } from \"../../hooks/api\"\n\nexport interface ApiAutocompleteFieldProps<\n  SearchKey extends keyof Omit<QueryArg, \"limit\" | \"offset\">,\n  // api type args\n  QueryArg extends ListArg,\n  ResultType extends ListResult<any>,\n  // autocomplete type args\n  Multiple extends boolean | undefined = false,\n  DisableClearable extends boolean | undefined = false,\n  FreeSolo extends boolean | undefined = false,\n  ChipComponent extends ElementType = ChipTypeMap[\"defaultComponent\"],\n> extends Omit<\n    AutocompleteFieldProps<\n      ModelId,\n      Multiple,\n      DisableClearable,\n      FreeSolo,\n      ChipComponent\n    >,\n    | \"options\"\n    | \"ListboxComponent\"\n    | \"filterOptions\"\n    | \"getOptionLabel\"\n    | \"getOptionKey\"\n    | \"onInputChange\"\n  > {\n  useLazyListQuery: TypedUseLazyQuery<ResultType, QueryArg, any>\n  filterOptions?: Omit<QueryArg, \"limit\" | \"offset\" | SearchKey>\n  getOptionLabel: (result: ResultType[\"data\"][number]) => string\n  getOptionKey?: (result: ResultType[\"data\"][number]) => ModelId\n  searchKey: SearchKey\n}\n\nconst ApiAutocompleteField = <\n  SearchKey extends keyof Omit<QueryArg, \"limit\" | \"offset\">,\n  // api type args\n  QueryArg extends ListArg,\n  ResultType extends ListResult<any>,\n  // autocomplete type args\n  Multiple extends boolean | undefined = false,\n  DisableClearable extends boolean | undefined = false,\n  FreeSolo extends boolean | undefined = false,\n  ChipComponent extends ElementType = ChipTypeMap[\"defaultComponent\"],\n>({\n  useLazyListQuery,\n  filterOptions,\n  getOptionLabel,\n  getOptionKey = result => result.id as ModelId,\n  searchKey,\n  ...otherAutocompleteFieldProps\n}: ApiAutocompleteFieldProps<\n  SearchKey,\n  // api type args\n  QueryArg,\n  ResultType,\n  // autocomplete type args\n  Multiple,\n  DisableClearable,\n  FreeSolo,\n  ChipComponent\n>): JSX.Element => {\n  const [search, setSearch] = useState(\"\")\n  const [trigger, { isLoading, isError }] = useLazyListQuery()\n  const [{ limit, offset }, setPagination] = usePagination()\n  const [{ options, hasMore }, setState] = useState<{\n    options: Record<ModelId, ResultType[\"data\"][number]>\n    hasMore: boolean\n  }>({ options: {}, hasMore: true })\n\n  // Call api\n  useEffect(\n    () => {\n      const arg = { limit, offset, ...filterOptions } as QueryArg\n      // @ts-expect-error search key can index arg\n      if (search) arg[searchKey] = search\n\n      trigger(arg, true)\n        .unwrap()\n        .then(({ data, offset, limit, count }) => {\n          setState(({ options: previousOptions }) => {\n            const options = { ...previousOptions }\n            data.forEach(result => {\n              options[getOptionKey(result)] = result\n            })\n            return { options, hasMore: offset + limit < count }\n          })\n        })\n        .catch(error => {\n          if (error) console.error(error)\n          // TODO: gracefully handle error\n        })\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      trigger,\n      limit,\n      offset,\n      searchKey,\n      search,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...Object.values(filterOptions || {}),\n    ],\n  )\n\n  // Get options keys\n  let optionKeys: ModelId[] = Object.keys(options)\n  if (!optionKeys.length) return <></>\n  if (typeof getOptionKey(Object.values(options)[0]) === \"number\") {\n    optionKeys = optionKeys.map(Number)\n  }\n\n  function loadNextPage() {\n    setPagination(({ page, limit }) => ({ page: page + 1, limit }))\n  }\n\n  const ListboxComponent: ForwardRefRenderFunction<\n    unknown,\n    HTMLAttributes<HTMLElement>\n  > = ({ children, ...props }, ref) => {\n    const listItems = Children.toArray(children)\n    if (isLoading) listItems.push(<CircularProgress key=\"is-loading\" />)\n    else {\n      if (isError) listItems.push(<SyncError key=\"is-error\" />)\n      if (hasMore) {\n        listItems.push(\n          <Button key=\"load-more\" onClick={loadNextPage}>\n            Load more\n          </Button>,\n        )\n      }\n    }\n\n    return (\n      <ul\n        {...props}\n        // @ts-expect-error ref is assignable\n        ref={ref}\n        onScroll={event => {\n          // If not already loading and scrolled to bottom\n          if (\n            !isLoading &&\n            event.currentTarget.clientHeight + event.currentTarget.scrollTop >=\n              event.currentTarget.scrollHeight\n          ) {\n            loadNextPage()\n          }\n        }}\n      >\n        {listItems}\n      </ul>\n    )\n  }\n\n  return (\n    <AutocompleteField\n      options={optionKeys}\n      getOptionLabel={id => getOptionLabel(options[id])}\n      onInputChange={(_, value, reason) => {\n        setSearch(reason === \"input\" ? value : \"\")\n      }}\n      ListboxComponent={forwardRef(ListboxComponent)}\n      {...otherAutocompleteFieldProps}\n    />\n  )\n}\n\nexport default ApiAutocompleteField\n","import {\n  Autocomplete,\n  type AutocompleteProps,\n  type ChipTypeMap,\n  TextField,\n  type TextFieldProps,\n} from \"@mui/material\"\nimport { type ElementType, type JSX } from \"react\"\nimport { Field, type FieldConfig, type FieldProps } from \"formik\"\nimport {\n  type ValidateOptions,\n  number as YupNumber,\n  string as YupString,\n} from \"yup\"\n\nimport { type FormValues, schemaToFieldValidator } from \"../../utils/form\"\nimport { getNestedProperty } from \"../../utils/general\"\n\nexport interface AutocompleteFieldProps<\n  Value extends string | number,\n  Multiple extends boolean | undefined = false,\n  DisableClearable extends boolean | undefined = false,\n  FreeSolo extends boolean | undefined = false,\n  ChipComponent extends ElementType = ChipTypeMap[\"defaultComponent\"],\n> extends Omit<\n    AutocompleteProps<\n      Value,\n      Multiple,\n      DisableClearable,\n      FreeSolo,\n      ChipComponent\n    >,\n    \"renderInput\" | \"defaultValue\" | \"onChange\" | \"onBlur\" | \"value\"\n  > {\n  textFieldProps: Omit<\n    TextFieldProps,\n    | \"name\"\n    | \"value\"\n    | \"onChange\"\n    | \"onBlur\"\n    | \"error\"\n    | \"helperText\"\n    | \"defaultValue\"\n    | \"type\"\n  > & {\n    name: string\n  }\n  validateOptions?: ValidateOptions\n}\n\nconst AutocompleteField = <\n  Value extends string | number,\n  Multiple extends boolean | undefined = false,\n  DisableClearable extends boolean | undefined = false,\n  FreeSolo extends boolean | undefined = false,\n  ChipComponent extends ElementType = ChipTypeMap[\"defaultComponent\"],\n>({\n  textFieldProps,\n  options,\n  validateOptions,\n  ...otherAutocompleteProps\n}: AutocompleteFieldProps<\n  Value,\n  Multiple,\n  DisableClearable,\n  FreeSolo,\n  ChipComponent\n>): JSX.Element => {\n  const { id, name, required, ...otherTextFieldProps } = textFieldProps\n\n  const dotPath = name.split(\".\")\n\n  const message = \"not a valid option\"\n  let schema =\n    typeof options[0] === \"string\"\n      ? YupString().oneOf(options as readonly string[], message)\n      : YupNumber().oneOf(options as readonly number[], message)\n  if (required) schema = schema.required()\n\n  const fieldConfig: FieldConfig = {\n    name,\n    type: typeof options[0] === \"string\" ? \"text\" : \"number\",\n    validate: schemaToFieldValidator(schema, validateOptions),\n  }\n\n  return (\n    <Field {...fieldConfig}>\n      {({ form, meta }: FieldProps) => {\n        const value = getNestedProperty(\n          form.values as FormValues,\n          dotPath,\n        ) as string\n        const touched = getNestedProperty(form.touched, dotPath) as boolean\n        const error = getNestedProperty(form.errors, dotPath) as\n          | string\n          | undefined\n\n        return (\n          <Autocomplete\n            options={options}\n            // @ts-expect-error value can be assigned\n            defaultValue={\n              meta.initialValue === \"\"\n                ? undefined\n                : (meta.initialValue as string)\n            }\n            renderInput={({\n              id: _, // eslint-disable-line @typescript-eslint/no-unused-vars\n              ...otherParams\n            }) => (\n              <TextField\n                id={id ?? name}\n                name={name}\n                required={required}\n                type=\"text\" // Force to be string to avoid number incrementor/decrementor\n                value={value}\n                error={touched && Boolean(error)}\n                helperText={touched && error}\n                {...otherTextFieldProps}\n                {...otherParams}\n              />\n            )}\n            onChange={(_, value) => {\n              void form.setFieldValue(name, value ?? undefined, true)\n            }}\n            onBlur={form.handleBlur}\n            {...otherAutocompleteProps}\n          />\n        )\n      }}\n    </Field>\n  )\n}\n\nexport default AutocompleteField\n","import {\n  Checkbox,\n  type CheckboxProps,\n  FormControl,\n  FormControlLabel,\n  type FormControlLabelProps,\n  FormHelperText,\n} from \"@mui/material\"\nimport { Field, type FieldConfig, type FieldProps } from \"formik\"\nimport { type ValidateOptions, bool as YupBool } from \"yup\"\nimport { type FC } from \"react\"\n\nimport { type FormValues, schemaToFieldValidator } from \"../../utils/form\"\nimport { getNestedProperty } from \"../../utils/general\"\n\nexport interface CheckboxFieldProps\n  extends Omit<\n    CheckboxProps,\n    \"defaultChecked\" | \"value\" | \"onChange\" | \"onBlur\"\n  > {\n  name: string\n  formControlLabelProps: Omit<FormControlLabelProps, \"control\">\n  errorMessage?: string\n  validateOptions?: ValidateOptions\n}\n\nconst CheckboxField: FC<CheckboxFieldProps> = ({\n  id,\n  name,\n  formControlLabelProps,\n  required = false,\n  errorMessage = \"this is a required field\",\n  validateOptions,\n  ...otherCheckboxProps\n}) => {\n  const dotPath = name.split(\".\")\n\n  let schema = YupBool()\n  if (required) schema = schema.oneOf([true], errorMessage)\n\n  const fieldConfig: FieldConfig = {\n    name,\n    type: \"checkbox\",\n    validate: schemaToFieldValidator(schema, validateOptions),\n  }\n\n  return (\n    <Field {...fieldConfig}>\n      {({ form, meta }: FieldProps) => {\n        const touched = getNestedProperty(form.touched, dotPath) as boolean\n        const error = getNestedProperty(form.errors, dotPath) as\n          | string\n          | undefined\n        const value = getNestedProperty(\n          form.values as FormValues,\n          dotPath,\n        ) as boolean\n\n        const hasError = touched && Boolean(error)\n\n        // https://mui.com/material-ui/react-checkbox/#formgroup\n        return (\n          <FormControl error={hasError} required={required}>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  defaultChecked={meta.initialValue as boolean}\n                  id={id ?? name}\n                  name={name}\n                  value={value}\n                  onChange={form.handleChange}\n                  onBlur={form.handleBlur}\n                  {...otherCheckboxProps}\n                />\n              }\n              {...formControlLabelProps}\n            />\n            {hasError && <FormHelperText>{error}</FormHelperText>}\n          </FormControl>\n        )\n      }}\n    </Field>\n  )\n}\n\nexport default CheckboxField\n","import { type ElementType, type JSX } from \"react\"\nimport { type ChipTypeMap } from \"@mui/material\"\n\nimport AutocompleteField, {\n  type AutocompleteFieldProps,\n} from \"./AutocompleteField\"\nimport {\n  COUNTRY_ISO_CODES,\n  COUNTRY_ISO_CODE_MAPPING,\n  type CountryIsoCodes,\n} from \"../../utils/general\"\n\nexport interface CountryFieldProps<\n  Multiple extends boolean | undefined = false,\n  DisableClearable extends boolean | undefined = false,\n  FreeSolo extends boolean | undefined = false,\n  ChipComponent extends ElementType = ChipTypeMap[\"defaultComponent\"],\n> extends Omit<\n    AutocompleteFieldProps<\n      string,\n      Multiple,\n      DisableClearable,\n      FreeSolo,\n      ChipComponent\n    >,\n    \"options\" | \"textFieldProps\" | \"getOptionLabel\"\n  > {\n  textFieldProps?: Omit<\n    AutocompleteFieldProps<\n      string,\n      Multiple,\n      DisableClearable,\n      FreeSolo,\n      ChipComponent\n    >[\"textFieldProps\"],\n    \"name\"\n  > & {\n    name?: string\n  }\n}\n\nconst CountryField = <\n  Multiple extends boolean | undefined = false,\n  DisableClearable extends boolean | undefined = false,\n  FreeSolo extends boolean | undefined = false,\n  ChipComponent extends ElementType = ChipTypeMap[\"defaultComponent\"],\n>({\n  textFieldProps,\n  ...otherAutocompleteFieldProps\n}: CountryFieldProps<\n  Multiple,\n  DisableClearable,\n  FreeSolo,\n  ChipComponent\n>): JSX.Element => {\n  const {\n    name = \"country\",\n    label = \"Country\",\n    placeholder = \"Select your country\",\n    ...otherTextFieldProps\n  } = textFieldProps || {}\n\n  return (\n    <AutocompleteField\n      options={COUNTRY_ISO_CODES}\n      getOptionLabel={isoCode =>\n        COUNTRY_ISO_CODE_MAPPING[isoCode as CountryIsoCodes]\n      }\n      textFieldProps={{ name, label, placeholder, ...otherTextFieldProps }}\n      {...otherAutocompleteFieldProps}\n    />\n  )\n}\n\nexport default CountryField\n","import \"dayjs/locale/en-gb\"\nimport {\n  DatePicker,\n  type DatePickerProps,\n  LocalizationProvider,\n} from \"@mui/x-date-pickers\"\nimport { Field, type FieldConfig, type FieldProps } from \"formik\"\nimport { type ValidateOptions, date as YupDate } from \"yup\"\nimport dayjs, { type Dayjs } from \"dayjs\"\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\"\nimport { type JSX } from \"react\"\n\nimport { type FormValues, schemaToFieldValidator } from \"../../utils/form\"\nimport { getNestedProperty } from \"../../utils/general\"\n\nexport interface DatePickerFieldProps<\n  TEnableAccessibleFieldDOMStructure extends boolean = true,\n> extends Omit<\n    DatePickerProps<TEnableAccessibleFieldDOMStructure>,\n    \"name\" | \"value\" | \"onChange\" | \"slotProps\"\n  > {\n  name: string\n  required?: boolean\n  validateOptions?: ValidateOptions\n}\n\nconst DatePickerField = <\n  TEnableAccessibleFieldDOMStructure extends boolean = false,\n>({\n  name,\n  required,\n  minDate,\n  maxDate,\n  validateOptions,\n  ...otherDatePickerProps\n}: DatePickerFieldProps<TEnableAccessibleFieldDOMStructure>): JSX.Element => {\n  const dotPath = name.split(\".\")\n\n  function dateToString(date: Dayjs) {\n    return date.locale(\"en-gb\").format(\"L\")\n  }\n\n  let schema = YupDate()\n  if (required) schema = schema.required()\n  if (minDate) {\n    schema = schema.min(\n      minDate,\n      `this field must be after or equal to ${dateToString(minDate)}`,\n    )\n  }\n  if (maxDate) {\n    schema = schema.max(\n      maxDate,\n      `this field must be before or equal to ${dateToString(maxDate)}`,\n    )\n  }\n\n  const fieldConfig: FieldConfig = {\n    name,\n    type: \"date\",\n    validate: schemaToFieldValidator(schema, validateOptions),\n  }\n\n  return (\n    <Field {...fieldConfig}>\n      {({ form }: FieldProps) => {\n        const error = getNestedProperty(form.errors, dotPath) as\n          | string\n          | undefined\n        const touched = getNestedProperty(form.touched, dotPath) as boolean\n        let value: Dayjs | null | string = getNestedProperty(\n          form.values as FormValues,\n          dotPath,\n        ) as string\n\n        value = value ? dayjs(value) : null\n\n        function handleChange(value: Dayjs | null) {\n          void form.setFieldValue(\n            name,\n            value && value.isValid() ? value.format(\"YYYY-MM-DD\") : null,\n            true,\n          )\n        }\n\n        return (\n          <LocalizationProvider\n            dateAdapter={AdapterDayjs}\n            adapterLocale=\"en-gb\"\n          >\n            <DatePicker\n              name={name}\n              value={value}\n              minDate={minDate}\n              maxDate={maxDate}\n              onChange={handleChange}\n              slotProps={{\n                textField: {\n                  id: name,\n                  // @ts-expect-error value is compatible\n                  onChange: value => {\n                    handleChange(value as Dayjs | null)\n                  },\n                  onBlur: form.handleBlur,\n                  required,\n                  error: touched && Boolean(error),\n                  helperText: (touched && error) as false | string,\n                },\n              }}\n              {...otherDatePickerProps}\n            />\n          </LocalizationProvider>\n        )\n      }}\n    </Field>\n  )\n}\n\nexport default DatePickerField\n","import { type FC, useEffect, useState } from \"react\"\nimport { Field, type FieldConfig, type FieldProps } from \"formik\"\nimport {\n  TextField as MuiTextField,\n  type TextFieldProps as MuiTextFieldProps,\n} from \"@mui/material\"\nimport { type StringSchema, type ValidateOptions, array as YupArray } from \"yup\"\n\nimport { type FormValues, schemaToFieldValidator } from \"../../utils/form\"\nimport { getNestedProperty } from \"../../utils/general\"\n\nexport type TextFieldProps = Omit<\n  MuiTextFieldProps,\n  | \"name\"\n  | \"value\"\n  | \"onChange\"\n  | \"onBlur\"\n  | \"error\"\n  | \"defaultValue\"\n  | \"helperText\"\n> & {\n  name: string\n  schema: StringSchema\n  validateOptions?: ValidateOptions\n  dirty?: boolean\n  split?: string | RegExp\n  unique?: boolean\n  uniqueCaseInsensitive?: boolean\n}\n\n// https://formik.org/docs/examples/with-material-ui\nconst TextField: FC<TextFieldProps> = ({\n  id,\n  name,\n  schema,\n  type = \"text\",\n  required = false,\n  dirty = false,\n  unique = false,\n  uniqueCaseInsensitive = false,\n  split,\n  validateOptions,\n  ...otherTextFieldProps\n}) => {\n  const [initialValue, setInitialValue] = useState<string | string[]>(\"\")\n\n  const dotPath = name.split(\".\")\n\n  function buildSchema() {\n    // Build a schema for a single string.\n    let stringSchema = schema\n    // 1: Validate string is required.\n    stringSchema = required ? stringSchema.required() : stringSchema.optional()\n    // 2: Validate string is dirty.\n    if (dirty && !split)\n      stringSchema = stringSchema.notOneOf(\n        [initialValue as string],\n        \"cannot be initial value\",\n      )\n    // Return a schema for a single string.\n    if (!split) return stringSchema\n\n    // Build a schema for an array of strings.\n    let arraySchema = YupArray().of(stringSchema)\n    // 1: Validate array has min one string.\n    arraySchema = required\n      ? arraySchema.required().min(1)\n      : arraySchema.optional()\n    // 2: Validate array has unique strings.\n    if (unique || uniqueCaseInsensitive)\n      arraySchema = arraySchema.test({\n        message: \"cannot have duplicates\",\n        test: values => {\n          if (\n            Array.isArray(values) &&\n            values.length >= 2 &&\n            values.every(value => typeof value === \"string\")\n          ) {\n            return (\n              new Set(\n                uniqueCaseInsensitive\n                  ? values.map(value => value.toLowerCase())\n                  : values,\n              ).size === values.length\n            )\n          }\n\n          return true\n        },\n      })\n    // 3: Validate array is dirty.\n    if (dirty)\n      arraySchema = arraySchema.notOneOf(\n        [initialValue as string[]],\n        \"cannot be initial value\",\n      )\n    // Return a schema for an array of strings.\n    return arraySchema\n  }\n\n  const fieldConfig: FieldConfig = {\n    name,\n    type,\n    validate: schemaToFieldValidator(buildSchema(), validateOptions),\n  }\n\n  const FieldInternal: FC<FieldProps> = ({ form }) => {\n    const initialValue = getNestedProperty(\n      form.initialValues as FormValues,\n      dotPath,\n    ) as string\n    const value = getNestedProperty(\n      form.values as FormValues,\n      dotPath,\n    ) as string\n    const error = getNestedProperty(form.errors, dotPath) as string | undefined\n    const touched = getNestedProperty(form.touched, dotPath) as boolean\n\n    useEffect(() => {\n      setInitialValue(initialValue)\n    }, [initialValue])\n\n    useEffect(() => {\n      void form.setFieldValue(\n        name,\n        split && typeof value === \"string\" ? value.split(split) : value,\n        true,\n      )\n    }, [value]) // eslint-disable-line react-hooks/exhaustive-deps\n\n    return (\n      <MuiTextField\n        id={id ?? name}\n        name={name}\n        type={type}\n        required={required}\n        value={value}\n        onChange={form.handleChange}\n        onBlur={form.handleBlur}\n        error={touched && Boolean(error)}\n        helperText={(touched && error) as false | string}\n        {...otherTextFieldProps}\n      />\n    )\n  }\n\n  return <Field {...fieldConfig}>{FieldInternal}</Field>\n}\n\nexport default TextField\n","import { EmailOutlined as EmailOutlinedIcon } from \"@mui/icons-material\"\nimport type { FC } from \"react\"\nimport { InputAdornment } from \"@mui/material\"\nimport { string as YupString } from \"yup\"\n\nimport TextField, { type TextFieldProps } from \"./TextField\"\n\nexport type EmailFieldProps = Omit<TextFieldProps, \"type\" | \"name\" | \"schema\"> &\n  Partial<Pick<TextFieldProps, \"name\">>\n\nconst EmailField: FC<EmailFieldProps> = ({\n  name = \"email\",\n  label = \"Email address\",\n  placeholder = \"Enter your email address\",\n  InputProps = {},\n  ...otherTextFieldProps\n}) => {\n  return (\n    <TextField\n      type=\"email\"\n      schema={YupString().email()}\n      name={name}\n      label={label}\n      placeholder={placeholder}\n      InputProps={{\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <EmailOutlinedIcon />\n          </InputAdornment>\n        ),\n        ...InputProps,\n      }}\n      {...otherTextFieldProps}\n    />\n  )\n}\n\nexport default EmailField\n","import type { FC } from \"react\"\nimport { InputAdornment } from \"@mui/material\"\nimport { PersonOutlined as PersonOutlinedIcon } from \"@mui/icons-material\"\n\nimport TextField, { type TextFieldProps } from \"./TextField\"\nimport { schemas } from \"../../api\"\n\nexport type FirstNameFieldProps = Omit<\n  TextFieldProps,\n  \"type\" | \"name\" | \"schema\"\n> &\n  Partial<Pick<TextFieldProps, \"name\">>\n\nconst FirstNameField: FC<FirstNameFieldProps> = ({\n  name = \"first_name\",\n  label = \"First name\",\n  placeholder = \"Enter your first name\",\n  InputProps = {},\n  ...otherTextFieldProps\n}) => {\n  return (\n    <TextField\n      schema={schemas.user.first_name}\n      name={name}\n      label={label}\n      placeholder={placeholder}\n      InputProps={{\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <PersonOutlinedIcon />\n          </InputAdornment>\n        ),\n        ...InputProps,\n      }}\n      {...otherTextFieldProps}\n    />\n  )\n}\n\nexport default FirstNameField\n","import {\n  type FC,\n  type JSX,\n  type ReactNode,\n  type RefObject,\n  useEffect,\n  useRef,\n} from \"react\"\nimport { FormHelperText, type FormHelperTextProps } from \"@mui/material\"\nimport {\n  Formik,\n  type FormikConfig,\n  type FormikErrors,\n  Form as FormikForm,\n  type FormikProps,\n} from \"formik\"\nimport type { TypedUseMutation } from \"@reduxjs/toolkit/query/react\"\n\nimport {\n  type FormValues,\n  type SubmitFormOptions,\n  submitForm,\n} from \"../../utils/form\"\nimport { getKeyPaths } from \"../../utils/general\"\n\nconst SCROLL_INTO_VIEW_OPTIONS: ScrollIntoViewOptions = {\n  behavior: \"smooth\",\n  block: \"start\",\n}\n\ntype NonFieldErrorsProps = Omit<FormHelperTextProps, \"error\" | \"ref\"> & {\n  scrollIntoViewOptions?: ScrollIntoViewOptions\n}\n\nconst NonFieldErrors: FC<NonFieldErrorsProps> = ({\n  scrollIntoViewOptions = SCROLL_INTO_VIEW_OPTIONS,\n  ...formHelperTextProps\n}) => {\n  const pRef = useRef<HTMLParagraphElement>(null)\n\n  useEffect(() => {\n    if (pRef.current) pRef.current.scrollIntoView(scrollIntoViewOptions)\n  }, [scrollIntoViewOptions])\n\n  return <FormHelperText ref={pRef} error {...formHelperTextProps} />\n}\n\nexport type FormErrors<Values> = FormikErrors<\n  Omit<Values, \"__all__\"> & { __all__: string }\n>\n\ntype _FormikProps<Values> = Omit<FormikProps<Values>, \"errors\"> & {\n  errors: FormErrors<Values>\n}\n\ntype BaseFormProps<Values> = Omit<FormikConfig<Values>, \"children\"> & {\n  children: ReactNode | ((props: _FormikProps<Values>) => ReactNode)\n  scrollIntoViewOptions?: ScrollIntoViewOptions\n  nonFieldErrorsProps?: Omit<NonFieldErrorsProps, \"children\">\n  fieldRefs?: Array<{\n    name: string\n    inputRef: RefObject<HTMLInputElement | null>\n  }>\n}\n\nconst BaseForm = <Values extends FormValues>({\n  children,\n  scrollIntoViewOptions = SCROLL_INTO_VIEW_OPTIONS,\n  nonFieldErrorsProps,\n  fieldRefs = [],\n  ...otherFormikProps\n}: BaseFormProps<Values>) => (\n  <Formik {...otherFormikProps}>\n    {/* @ts-expect-error value is assignable */}\n    {(formik: _FormikProps<Values>) => {\n      const hasErrors = Boolean(Object.keys(formik.errors).length)\n      const hasNonFieldErrors =\n        hasErrors && typeof formik.errors.__all__ === \"string\"\n\n      // If a submission was attempted and refs to the fields were provided.\n      if (\n        hasErrors &&\n        !hasNonFieldErrors &&\n        formik.isSubmitting &&\n        fieldRefs.length\n      ) {\n        const errorNames = getKeyPaths(formik.errors)\n\n        const input = fieldRefs.find(({ name }) => errorNames.includes(name))\n          ?.inputRef.current\n\n        if (input) input.scrollIntoView(scrollIntoViewOptions)\n      }\n\n      return (\n        <>\n          {hasNonFieldErrors && (\n            <NonFieldErrors {...nonFieldErrorsProps}>\n              {formik.errors.__all__ as string}\n            </NonFieldErrors>\n          )}\n          <FormikForm>\n            {typeof children === \"function\" ? children(formik) : children}\n          </FormikForm>\n        </>\n      )\n    }}\n  </Formik>\n)\n\ntype SubmitFormProps<\n  Values extends FormValues,\n  QueryArg extends FormValues,\n  ResultType,\n> = Omit<BaseFormProps<Values>, \"onSubmit\"> & {\n  useMutation: TypedUseMutation<ResultType, QueryArg, any>\n} & (Values extends QueryArg\n    ? { submitOptions?: SubmitFormOptions<Values, QueryArg, ResultType> }\n    : { submitOptions: SubmitFormOptions<Values, QueryArg, ResultType> })\n\nconst SubmitForm = <\n  Values extends FormValues,\n  QueryArg extends FormValues,\n  ResultType,\n>({\n  useMutation,\n  submitOptions,\n  ...baseFormProps\n}: SubmitFormProps<Values, QueryArg, ResultType>): JSX.Element => {\n  const [trigger] = useMutation()\n\n  return (\n    <BaseForm\n      {...baseFormProps}\n      onSubmit={submitForm<Values, QueryArg, ResultType>(\n        trigger,\n        baseFormProps.initialValues,\n        submitOptions as SubmitFormOptions<Values, QueryArg, ResultType>,\n      )}\n    />\n  )\n}\n\nexport type FormProps<\n  Values extends FormValues,\n  QueryArg extends FormValues,\n  ResultType,\n> = BaseFormProps<Values> | SubmitFormProps<Values, QueryArg, ResultType>\n\nconst Form: {\n  <Values extends FormValues>(props: BaseFormProps<Values>): JSX.Element\n  <Values extends FormValues, QueryArg extends FormValues, ResultType>(\n    props: SubmitFormProps<Values, QueryArg, ResultType>,\n  ): JSX.Element\n} = <\n  Values extends FormValues = FormValues,\n  QueryArg extends FormValues = FormValues,\n  ResultType = any,\n>(\n  props: FormProps<Values, QueryArg, ResultType>,\n): JSX.Element => {\n  return \"onSubmit\" in props ? <BaseForm {...props} /> : SubmitForm(props)\n}\n\nexport default Form\n","import { type FC } from \"react\"\nimport { string as YupString } from \"yup\"\n\nimport TextField, { type TextFieldProps } from \"./TextField\"\n\nexport type OtpFieldProps = Omit<\n  TextFieldProps,\n  \"name\" | \"schema\" | \"required\"\n> &\n  Partial<Pick<TextFieldProps, \"name\">>\n\nconst OtpField: FC<OtpFieldProps> = ({\n  name = \"otp\",\n  label = \"OTP\",\n  placeholder = \"Enter your OTP\",\n  ...otherTextFieldProps\n}) => (\n  <TextField\n    name={name}\n    label={label}\n    schema={YupString().matches(/^[0-9]{6}$/, \"Must be exactly 6 digits.\")}\n    placeholder={placeholder}\n    required\n    {...otherTextFieldProps}\n  />\n)\n\nexport default OtpField\n","import {\n  type Dispatch,\n  type FC,\n  type SetStateAction,\n  useEffect,\n  useState,\n} from \"react\"\nimport { Field, type FieldConfig, type FieldProps } from \"formik\"\nimport { TextField as MuiTextField, type TextFieldProps } from \"@mui/material\"\nimport { type ValidateOptions, string as YupString } from \"yup\"\n\nimport { type FormValues, schemaToFieldValidator } from \"../../utils/form\"\nimport { getNestedProperty } from \"../../utils/general\"\n\nexport type RepeatFieldProps = Omit<\n  TextFieldProps,\n  | \"name\"\n  | \"value\"\n  | \"onChange\"\n  | \"onBlur\"\n  | \"error\"\n  | \"helperText\"\n  | \"defaultValue\"\n  | \"required\"\n> & {\n  name: string\n  validateOptions?: ValidateOptions\n}\n\nconst TextField: FC<\n  RepeatFieldProps & {\n    repeatName: string\n    setValue: Dispatch<SetStateAction<string>>\n    fieldProps: FieldProps\n  }\n> = ({\n  id,\n  repeatName,\n  setValue,\n  fieldProps,\n  name,\n  label,\n  placeholder,\n  type,\n  ...otherTextFieldProps\n}) => {\n  const { form } = fieldProps\n\n  const dotPath = name.split(\".\")\n  const value = getNestedProperty(form.values as FormValues, dotPath) as string\n\n  const repeatDotPath = repeatName.split(\".\")\n  const repeatValue = getNestedProperty(\n    form.values as FormValues,\n    repeatDotPath,\n  ) as string\n  const repeatTouched = getNestedProperty(\n    form.touched,\n    repeatDotPath,\n  ) as boolean\n  const repeatError = getNestedProperty(form.errors, repeatDotPath) as\n    | string\n    | undefined\n\n  useEffect(() => {\n    setValue(value)\n  }, [setValue, value])\n\n  return (\n    <MuiTextField\n      required\n      type={type}\n      label={label ?? `Repeat ${name.replace(\"_\", \" \")}`}\n      placeholder={placeholder ?? `Enter your ${name.replace(\"_\", \" \")} again`}\n      id={id ?? repeatName}\n      name={repeatName}\n      value={repeatValue}\n      onChange={form.handleChange}\n      onBlur={form.handleBlur}\n      error={repeatTouched && Boolean(repeatError)}\n      helperText={(repeatTouched && repeatError) as false | string}\n      {...otherTextFieldProps}\n    />\n  )\n}\n\n// https://formik.org/docs/examples/with-material-ui\nconst RepeatField: FC<RepeatFieldProps> = ({\n  name,\n  type = \"text\",\n  validateOptions,\n  ...otherTextFieldProps\n}) => {\n  const [value, setValue] = useState(\"\")\n\n  const repeatName = `${name}_repeat`\n\n  const fieldConfig: FieldConfig = {\n    name: repeatName,\n    type,\n    validate: schemaToFieldValidator(\n      YupString().required().equals([value], \"does not match\"),\n      validateOptions,\n    ),\n  }\n\n  return (\n    <Field {...fieldConfig}>\n      {(fieldProps: FieldProps) => (\n        <TextField\n          name={name}\n          type={type}\n          repeatName={repeatName}\n          setValue={setValue}\n          fieldProps={fieldProps}\n          {...otherTextFieldProps}\n        />\n      )}\n    </Field>\n  )\n}\n\nexport default RepeatField\n","import { type FC, useState } from \"react\"\nimport { IconButton, InputAdornment } from \"@mui/material\"\nimport {\n  Visibility as VisibilityIcon,\n  VisibilityOff as VisibilityOffIcon,\n} from \"@mui/icons-material\"\nimport { string as YupString } from \"yup\"\n\nimport RepeatField, { type RepeatFieldProps } from \"./RepeatField\"\nimport TextField, { type TextFieldProps } from \"./TextField\"\n\nexport type PasswordFieldProps = Omit<\n  TextFieldProps,\n  \"type\" | \"name\" | \"schema\" | \"autoComplete\"\n> &\n  Partial<Pick<TextFieldProps, \"name\" | \"schema\">> & {\n    withRepeatField?: boolean\n    repeatFieldProps?: Omit<RepeatFieldProps, \"name\" | \"type\">\n  }\n\nconst PasswordField: FC<PasswordFieldProps> = ({\n  name = \"password\",\n  label = \"Password\",\n  placeholder = \"Enter your password\",\n  schema = YupString(),\n  InputProps = {},\n  withRepeatField = false,\n  repeatFieldProps = {},\n  ...otherTextFieldProps\n}) => {\n  const [isVisible, setIsVisible] = useState(false)\n\n  const type = isVisible ? \"text\" : \"password\"\n  const endAdornment = (\n    <InputAdornment position=\"end\">\n      <IconButton\n        onClick={() => {\n          setIsVisible(previousIsVisible => !previousIsVisible)\n        }}\n        edge=\"end\"\n      >\n        {isVisible ? <VisibilityIcon /> : <VisibilityOffIcon />}\n      </IconButton>\n    </InputAdornment>\n  )\n\n  return (\n    <>\n      <TextField\n        autoComplete=\"off\"\n        type={type}\n        name={name}\n        label={label}\n        schema={schema}\n        placeholder={placeholder}\n        InputProps={{ endAdornment, ...InputProps }}\n        {...otherTextFieldProps}\n      />\n      {withRepeatField && (\n        <RepeatField\n          name={name}\n          type={type}\n          {...repeatFieldProps}\n          InputProps={{ endAdornment, ...repeatFieldProps.InputProps }}\n        />\n      )}\n    </>\n  )\n}\n\nexport default PasswordField\n","import { Button, type ButtonProps } from \"@mui/material\"\nimport { Field, type FieldProps } from \"formik\"\nimport type { FC } from \"react\"\n\nimport { type FormValues } from \"../../utils/form\"\n\nexport interface SubmitButtonProps\n  extends Omit<ButtonProps, \"type\" | \"onClick\"> {}\n\nconst SubmitButton: FC<SubmitButtonProps> = ({\n  children = \"Submit\",\n  ...otherButtonProps\n}) => {\n  function getTouched(\n    values: Record<string, any>,\n    touched?: Record<string, any>,\n  ) {\n    touched = touched || {}\n    for (const key in values) {\n      const value: unknown = values[key]\n      touched[key] =\n        value instanceof Object && value.constructor === Object\n          ? getTouched(value, touched)\n          : true\n    }\n\n    return touched\n  }\n\n  return (\n    <Field name=\"submit\" type=\"submit\">\n      {({ form }: FieldProps) => (\n        <Button\n          type=\"button\"\n          onClick={() => {\n            void form\n              .setTouched(getTouched(form.values as FormValues), true)\n              .then(errors => {\n                const hasErrors = Boolean(errors && Object.keys(errors).length)\n                // If has errors, set isSubmitting=true so fields in the form are\n                // aware that a submission was attempted. Else, set\n                // isSubmitting=false as it will be set to true when calling\n                // submitForm().\n                form.setSubmitting(hasErrors)\n                if (!hasErrors) void form.submitForm()\n              })\n          }}\n          {...otherButtonProps}\n        >\n          {children}\n        </Button>\n      )}\n    </Field>\n  )\n}\n\nexport default SubmitButton\n","import { type ElementType, type JSX } from \"react\"\nimport { type ChipTypeMap } from \"@mui/material\"\n\nimport AutocompleteField, {\n  type AutocompleteFieldProps,\n} from \"./AutocompleteField\"\nimport { UK_COUNTIES } from \"../../utils/general\"\n\nexport interface UkCountyFieldProps<\n  Multiple extends boolean | undefined = false,\n  DisableClearable extends boolean | undefined = false,\n  FreeSolo extends boolean | undefined = false,\n  ChipComponent extends ElementType = ChipTypeMap[\"defaultComponent\"],\n> extends Omit<\n    AutocompleteFieldProps<\n      string,\n      Multiple,\n      DisableClearable,\n      FreeSolo,\n      ChipComponent\n    >,\n    \"options\" | \"textFieldProps\"\n  > {\n  textFieldProps?: Omit<\n    AutocompleteFieldProps<\n      string,\n      Multiple,\n      DisableClearable,\n      FreeSolo,\n      ChipComponent\n    >[\"textFieldProps\"],\n    \"name\"\n  > & {\n    name?: string\n  }\n}\n\nconst UkCountyField = <\n  Multiple extends boolean | undefined = false,\n  DisableClearable extends boolean | undefined = false,\n  FreeSolo extends boolean | undefined = false,\n  ChipComponent extends ElementType = ChipTypeMap[\"defaultComponent\"],\n>({\n  textFieldProps,\n  ...otherAutocompleteFieldProps\n}: UkCountyFieldProps<\n  Multiple,\n  DisableClearable,\n  FreeSolo,\n  ChipComponent\n>): JSX.Element => {\n  const {\n    name = \"uk_county\",\n    label = \"UK county\",\n    placeholder = \"Select your UK county\",\n    ...otherTextFieldProps\n  } = textFieldProps || {}\n\n  return (\n    <AutocompleteField\n      options={UK_COUNTIES}\n      textFieldProps={{ name, label, placeholder, ...otherTextFieldProps }}\n      {...otherAutocompleteFieldProps}\n    />\n  )\n}\n\nexport default UkCountyField\n"],"names":["ApiAutocompleteField","useLazyListQuery","filterOptions","getOptionLabel","getOptionKey","result","searchKey","otherAutocompleteFieldProps","search","setSearch","useState","trigger","isLoading","isError","limit","offset","setPagination","usePagination","options","hasMore","setState","useEffect","arg","data","count","previousOptions","error","optionKeys","jsx","Fragment","loadNextPage","page","ListboxComponent","children","props","ref","listItems","Children","CircularProgress","SyncError","Button","event","AutocompleteField","id","_","value","reason","forwardRef","textFieldProps","validateOptions","otherAutocompleteProps","name","required","otherTextFieldProps","dotPath","message","schema","YupString","YupNumber","fieldConfig","schemaToFieldValidator","Field","form","meta","getNestedProperty","touched","Autocomplete","otherParams","TextField","CheckboxField","formControlLabelProps","errorMessage","otherCheckboxProps","YupBool","hasError","jsxs","FormControl","FormControlLabel","Checkbox","FormHelperText","CountryField","label","placeholder","COUNTRY_ISO_CODES","isoCode","COUNTRY_ISO_CODE_MAPPING","DatePickerField","minDate","maxDate","otherDatePickerProps","dateToString","date","YupDate","dayjs","handleChange","LocalizationProvider","AdapterDayjs","DatePicker","type","dirty","unique","uniqueCaseInsensitive","split","initialValue","setInitialValue","buildSchema","stringSchema","arraySchema","YupArray","values","FieldInternal","MuiTextField","EmailField","InputProps","InputAdornment","EmailOutlinedIcon","FirstNameField","schemas.user","PersonOutlinedIcon","SCROLL_INTO_VIEW_OPTIONS","NonFieldErrors","scrollIntoViewOptions","formHelperTextProps","pRef","useRef","BaseForm","nonFieldErrorsProps","fieldRefs","otherFormikProps","Formik","formik","hasErrors","hasNonFieldErrors","errorNames","getKeyPaths","input","FormikForm","SubmitForm","useMutation","submitOptions","baseFormProps","submitForm","Form","OtpField","repeatName","setValue","fieldProps","repeatDotPath","repeatValue","repeatTouched","repeatError","RepeatField","PasswordField","withRepeatField","repeatFieldProps","isVisible","setIsVisible","endAdornment","IconButton","previousIsVisible","VisibilityIcon","VisibilityOffIcon","SubmitButton","otherButtonProps","getTouched","key","errors","UkCountyField","UK_COUNTIES"],"mappings":"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"}
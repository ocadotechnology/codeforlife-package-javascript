{"version":3,"file":"index.cjs.js","sources":["../../src/api/tagTypes.ts","../../src/api/createApi.ts"],"sourcesContent":["const tagTypes = [\n  // These are the tags for the common models used throughout our system.\n  // https://github.com/ocadotechnology/codeforlife-package-python/tree/main/codeforlife/user/models\n  // NOTE: Don't use the \"Teacher\" and \"Student\" tags. Use \"User\" instead.\n  \"User\",\n  \"School\",\n  \"Class\",\n  \"AuthFactor\",\n] as const\n\nexport default tagTypes\nexport type TagTypes = (typeof tagTypes)[number]\n","import {\n  type Api,\n  type BaseQueryApi,\n  type FetchArgs,\n  type FetchBaseQueryError,\n  type FetchBaseQueryMeta,\n  type MutationDefinition,\n  type QueryReturnValue,\n  createApi as _createApi,\n  type coreModuleName,\n  fetchBaseQuery,\n  type reactHooksModuleName,\n} from \"@reduxjs/toolkit/query/react\"\n\nimport defaultTagTypes, { type TagTypes as DefaultTagTypes } from \"./tagTypes\"\nimport { SERVICE_API_URL } from \"../settings\"\nimport { buildLogoutEndpoint } from \"./endpoints/session\"\nimport { getCsrfCookie } from \"../utils/auth\"\nimport { isSafeHttpMethod } from \"../utils/api\"\n\n// TODO: decide if we want to keep any of this.\n// export function handleResponseError(error: FetchBaseQueryError): void {\n//   if (\n//     error.status === 400 &&\n//     typeof error.data === \"object\" &&\n//     error.data !== null\n//   ) {\n//     // Parse the error's data from snake_case to camelCase.\n//     snakeCaseToCamelCase(error.data)\n//   } else if (error.status === 401) {\n//     // TODO: redirect to appropriate login page based on user type.\n//     window.location.href = `${PORTAL_BASE_URL}/login/teacher`\n//   } else {\n//     // Catch-all error pages by status-code.\n//     window.location.href = `${PORTAL_BASE_URL}/error/${\n//       [403, 404].includes(error.status as number) ? error.status : 500\n//     }`\n//   }\n// }\n\nexport default function createApi<TagTypes extends string = never>({\n  tagTypes = [],\n}: {\n  tagTypes?: readonly TagTypes[]\n} = {}): Api<\n  (\n    args: string | FetchArgs,\n    api: BaseQueryApi,\n    extraOptions: {},\n  ) => Promise<\n    QueryReturnValue<unknown, FetchBaseQueryError, FetchBaseQueryMeta>\n  >,\n  { logout: MutationDefinition<null, any, any, null, any, any> },\n  \"api\",\n  TagTypes | DefaultTagTypes,\n  typeof coreModuleName | typeof reactHooksModuleName\n> {\n  const fetch = fetchBaseQuery({\n    baseUrl: `${SERVICE_API_URL}/`,\n    credentials: \"include\",\n    prepareHeaders: (headers, endpoint) => {\n      const { type, arg } = endpoint as typeof endpoint & {\n        arg: string | FetchArgs\n      }\n      const method = typeof arg === \"string\" ? \"GET\" : arg.method || \"GET\"\n\n      if (type === \"mutation\" || !isSafeHttpMethod(method)) {\n        const csrfToken = getCsrfCookie()\n        if (csrfToken) headers.set(\"x-csrftoken\", csrfToken)\n      }\n\n      return headers\n    },\n  })\n\n  const api = _createApi({\n    // https://redux-toolkit.js.org/rtk-query/usage/customizing-queries#implementing-a-custom-basequery\n    baseQuery: async (args: string | FetchArgs, api, extraOptions) => {\n      if (api.type === \"mutation\" && getCsrfCookie() === undefined) {\n        // Get the CSRF token.\n        const { error } = await fetch(\n          { url: \"/csrf/cookie/\", method: \"GET\" },\n          api,\n          {},\n        )\n\n        // Validate we got the CSRF token.\n        if (error !== undefined) {\n          console.error(error)\n          // TODO\n          // window.location.href = `${PORTAL_BASE_URL}/error/500`\n        }\n        if (getCsrfCookie() === undefined) {\n          // TODO\n          // window.location.href = `${PORTAL_BASE_URL}/error/500`\n        }\n      }\n\n      // Send the HTTP request and fetch the response.\n      return await fetch(args, api, extraOptions)\n    },\n    tagTypes: [...defaultTagTypes, ...tagTypes],\n    endpoints: () => ({}),\n  })\n\n  return api.injectEndpoints({\n    endpoints: build => ({\n      logout: buildLogoutEndpoint<null, null>(api, build),\n    }),\n  })\n}\n"],"names":["tagTypes","createApi","fetch","fetchBaseQuery","SERVICE_API_URL","headers","endpoint","type","arg","method","isSafeHttpMethod","csrfToken","getCsrfCookie","api","_createApi","args","extraOptions","error","defaultTagTypes","build","buildLogoutEndpoint"],"mappings":"mTAAMA,EAAW,CAIf,OACA,SACA,QACA,YACF,ECgCA,SAAwBC,EAA2C,CAAA,SACjED,EAAW,CAAA,CACb,EAEI,GAYF,CACA,MAAME,EAAQC,EAAAA,eAAe,CAC3B,QAAS,GAAGC,EAAAA,eAAe,IAC3B,YAAa,UACb,eAAgB,CAACC,EAASC,IAAa,CACrC,KAAM,CAAE,KAAAC,EAAM,IAAAC,CAAA,EAAQF,EAGhBG,EAAS,OAAOD,GAAQ,SAAW,MAAQA,EAAI,QAAU,MAE/D,GAAID,IAAS,YAAc,CAACG,EAAAA,iBAAiBD,CAAM,EAAG,CACpD,MAAME,EAAYC,EAAAA,cAAA,EACdD,GAAWN,EAAQ,IAAI,cAAeM,CAAS,CACrD,CAEA,OAAON,CACT,CAAA,CACD,EAEKQ,EAAMC,EAAAA,UAAW,CAErB,UAAW,MAAOC,EAA0BF,EAAKG,IAAiB,CAChE,GAAIH,EAAI,OAAS,YAAcD,EAAAA,cAAA,IAAoB,OAAW,CAE5D,KAAM,CAAE,MAAAK,CAAA,EAAU,MAAMf,EACtB,CAAE,IAAK,gBAAiB,OAAQ,KAAA,EAChCW,EACA,CAAA,CAAC,EAICI,IAAU,QACZ,QAAQ,MAAMA,CAAK,EAIjBL,EAAAA,cAAA,CAIN,CAGA,OAAO,MAAMV,EAAMa,EAAMF,EAAKG,CAAY,CAC5C,EACA,SAAU,CAAC,GAAGE,EAAiB,GAAGlB,CAAQ,EAC1C,UAAW,KAAO,CAAA,EAAC,CACpB,EAED,OAAOa,EAAI,gBAAgB,CACzB,UAAWM,IAAU,CACnB,OAAQC,EAAAA,oBAAgCP,EAAKM,CAAK,CAAA,EACpD,CACD,CACH"}
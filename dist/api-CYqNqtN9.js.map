{"version":3,"file":"api-CYqNqtN9.js","sources":["../src/components/SyncError.tsx","../src/utils/api.tsx"],"sourcesContent":["import { Stack, Typography } from \"@mui/material\"\nimport { type FC } from \"react\"\nimport { SyncProblem as SyncProblemIcon } from \"@mui/icons-material\"\n\nexport interface SyncErrorProps {}\n\nconst SyncError: FC<SyncErrorProps> = () => (\n  <Stack alignItems=\"center\" alignContent=\"center\">\n    <SyncProblemIcon color=\"error\" />\n    <Typography color=\"error.main\">Failed to sync data</Typography>\n  </Stack>\n)\n\nexport default SyncError\n","import type {\n  FetchBaseQueryError,\n  TypedUseMutationResult,\n  TypedUseQueryHookResult,\n  TypedUseQueryStateResult,\n} from \"@reduxjs/toolkit/query/react\"\nimport { CircularProgress } from \"@mui/material\"\nimport { type ReactNode } from \"react\"\n\nimport { type Optional, type Required, getNestedProperty } from \"./general\"\nimport { type SchemaMap } from \"./schema\"\nimport SyncError from \"../components/SyncError\"\n\n// -----------------------------------------------------------------------------\n// Model Types\n// -----------------------------------------------------------------------------\n\n// The fields of a model.\nexport type Fields = Record<string, unknown>\n\nexport interface Tag<Type extends string> {\n  type: Type\n  id: string\n}\n\nexport type ModelId = string | number\n\n/**\n * A data model.\n *  Id: The type of Id.\n *  Data: The data fields.\n */\nexport type Model<Id extends ModelId, MFields extends Fields = Fields> = {\n  id: Id\n} & Omit<MFields, \"id\">\n\nexport type Schemas<M extends Model<any>> = {\n  [K in keyof M]-?: SchemaMap<M[K]>\n}\n\nexport type Result<\n  M extends Model<any>,\n  MFields extends keyof Omit<M, \"id\"> = never,\n> = Pick<M, \"id\" | MFields>\n\nexport type Arg<\n  M extends Model<any>,\n  RequiredFields extends keyof Omit<M, \"id\">,\n  OptionalFields extends keyof Omit<M, \"id\" | RequiredFields> = never,\n> = Required<M, RequiredFields> & Optional<M, OptionalFields>\n\n// -----------------------------------------------------------------------------\n// CRUD Types\n// https://www.django-rest-framework.org/api-guide/viewsets/#viewset-actions\n// -----------------------------------------------------------------------------\n\n// Create\n\nexport type CreateResult<\n  M extends Model<any>,\n  MFields extends keyof Omit<M, \"id\"> = never,\n> = Result<M, MFields>\n\nexport type CreateArg<\n  M extends Model<any>,\n  RequiredFields extends keyof Omit<M, \"id\">,\n  OptionalFields extends keyof Omit<M, \"id\" | RequiredFields> = never,\n> = Arg<M, RequiredFields, OptionalFields>\n\nexport type BulkCreateResult<\n  M extends Model<any>,\n  MFields extends keyof Omit<M, \"id\"> = never,\n  ExtraFields extends Fields = Fields,\n> = Array<Result<M, MFields> & ExtraFields>\n\nexport type BulkCreateArg<\n  M extends Model<any>,\n  RequiredFields extends keyof Omit<M, \"id\">,\n  OptionalFields extends keyof Omit<M, \"id\" | RequiredFields> = never,\n  ExtraFields extends Fields = Fields,\n> = Array<Arg<M, RequiredFields, OptionalFields> & ExtraFields>\n\n// Read\n\nexport type RetrieveResult<\n  M extends Model<any>,\n  MFields extends keyof Omit<M, \"id\"> = never,\n> = Result<M, MFields>\n\nexport type RetrieveArg<M extends Model<any>> = M[\"id\"]\n\nexport interface ListResult<\n  M extends Model<any>,\n  MFields extends keyof Omit<M, \"id\"> = never,\n  ExtraFields extends Fields = Fields,\n> {\n  count: number\n  offset: number\n  limit: number\n  max_limit: number\n  data: Array<Result<M, MFields> & ExtraFields>\n}\n\nexport type ListArg<Filters extends Fields = Fields> = {\n  limit: number\n  offset: number\n} & Partial<Omit<Filters, \"limit\" | \"offset\">>\n\n// Update\n\nexport type UpdateResult<\n  M extends Model<any>,\n  MFields extends keyof Omit<M, \"id\"> = never,\n> = Result<M, MFields>\n\ntype UpdateWithBody<\n  M extends Model<any>,\n  RequiredFields extends keyof Omit<M, \"id\">,\n  OptionalFields extends keyof Omit<M, \"id\" | RequiredFields>,\n> = Pick<M, \"id\"> & Arg<M, RequiredFields, OptionalFields>\n\n// NOTE: Sometimes update does not require a body. For example, if calling the\n// \"refresh\" action on an invitation object updates the expiry date to be 24\n// hours from now. In this case, you only need to pass the ID of the object.\nexport type UpdateArg<\n  M extends Model<any>,\n  RequiredFields extends keyof Omit<M, \"id\"> = never,\n  OptionalFields extends keyof Omit<M, \"id\" | RequiredFields> = never,\n> = [RequiredFields] extends [never]\n  ? [OptionalFields] extends [never]\n    ? M[\"id\"]\n    : UpdateWithBody<M, RequiredFields, OptionalFields>\n  : UpdateWithBody<M, RequiredFields, OptionalFields>\n\nexport type BulkUpdateResult<\n  M extends Model<any>,\n  MFields extends keyof Omit<M, \"id\"> = never,\n  ExtraFields extends Fields = Fields,\n> = Array<Result<M, MFields> & ExtraFields>\n\nexport type BulkUpdateArg<\n  M extends Model<any>,\n  RequiredFields extends keyof Omit<M, \"id\">,\n  OptionalFields extends keyof Omit<M, \"id\" | RequiredFields> = never,\n  ExtraFields extends Fields = Fields,\n> = Record<M[\"id\"], Arg<M, RequiredFields, OptionalFields> & ExtraFields>\n\n// Delete\n\nexport type DestroyResult = null\n\nexport type DestroyArg<M extends Model<any>> = M[\"id\"]\n\nexport type BulkDestroyResult = null\n\nexport type BulkDestroyArg<M extends Model<any>> = Array<M[\"id\"]>\n\n// -----------------------------------------------------------------------------\n// Functions\n// -----------------------------------------------------------------------------\n\nexport function buildUrl(\n  url: string,\n  params: {\n    search?: Fields\n    url?: Fields\n  },\n): string {\n  if (params.url) {\n    Object.entries(params.url).forEach(([key, value]) => {\n      url = url.replace(`<${key}>`, String(value))\n    })\n  }\n\n  if (params.search) {\n    const searchParams: string[][] = []\n    for (const key in params.search) {\n      const values = params.search[key]\n      if (values === undefined) continue\n\n      if (Array.isArray(values)) {\n        for (const value of values) searchParams.push([key, String(value)])\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-base-to-string\n        searchParams.push([key, String(values)])\n      }\n    }\n\n    if (searchParams.length !== 0) {\n      url += `?${new URLSearchParams(searchParams).toString()}`\n    }\n  }\n\n  return url\n}\n\nexport function isModelId(value: unknown): boolean {\n  return typeof value === \"number\" || typeof value === \"string\"\n}\n\nexport function listTag<Type extends string>(type: Type): Tag<Type> {\n  return { type, id: \"LIST\" }\n}\n\nexport type TagDataOptions = Partial<{\n  includeListTag: boolean\n  argKeysAreIds: boolean\n  id: string\n}>\n\nexport function tagData<Type extends string, M extends Model<any>>(\n  type: Type,\n  options?: TagDataOptions,\n): (\n  result:\n    | Result<M, any>\n    | Array<Result<M, any>>\n    | ListResult<M, any>\n    | null\n    | undefined,\n  error: FetchBaseQueryError | undefined,\n  arg:\n    | Arg<M, any>\n    | Array<Arg<M, any>>\n    | Record<M[\"id\"], Arg<M, any>>\n    | ListArg<any>\n    | Array<M[\"id\"]>\n    | string\n    | number\n    | undefined,\n) => Array<Tag<Type>> {\n  const {\n    includeListTag = false,\n    argKeysAreIds = false,\n    id = \"id\",\n  } = options || {}\n\n  function tags(\n    ids: ModelId[],\n    list: boolean = includeListTag,\n  ): Array<Tag<Type>> {\n    const tags = ids.map(id => ({ type, id: String(id) }))\n    if (list) tags.push(listTag(type))\n    return tags\n  }\n\n  function getModelId(result: Result<M, any>) {\n    return getNestedProperty(result, id) as ModelId\n  }\n\n  return (result, error, arg) => {\n    if (!error) {\n      if (arg) {\n        // The argument is an ID.\n        if (isModelId(arg)) return tags([arg as ModelId])\n\n        // The argument is an array of IDs.\n        if (Array.isArray(arg)) {\n          if (arg.length && isModelId(arg[0])) {\n            return tags(arg as Array<M[\"id\"]>)\n          }\n        }\n        // The argument is an object that contains the id field.\n        else if (typeof arg === \"object\" && argKeysAreIds) {\n          return tags(Object.keys(arg as Record<M[\"id\"], any>))\n        }\n      }\n\n      if (result) {\n        // The result is an array of models that contain the id field.\n        if (Array.isArray(result)) {\n          return tags(result.map(getModelId))\n        }\n\n        // The result is a model that contains the id field.\n        if (getModelId(result as Result<M, any>) !== undefined) {\n          return tags([getModelId(result as Result<M, any>)])\n        }\n\n        // The result is a list that contains an array of models that contain\n        // the id field.\n        return tags((result as ListResult<M, any>).data.map(getModelId), true)\n      }\n    }\n\n    return tags([])\n  }\n}\n\nexport function modelUrls(list: string, detail: string) {\n  if (list === detail) throw Error(\"List and detail are the same.\")\n\n  return { list, detail }\n}\n\nexport type HandleQueryStateOptions = Partial<{\n  loading: ReactNode\n  error: ReactNode\n}>\n\nexport function handleResultState<QueryArg, ResultType>(\n  result:\n    | TypedUseQueryHookResult<ResultType, QueryArg, any>\n    | TypedUseQueryStateResult<ResultType, QueryArg, any>\n    | TypedUseMutationResult<ResultType, QueryArg, any>,\n  children: (data: NonNullable<ResultType>) => ReactNode,\n  options?: HandleQueryStateOptions,\n): ReactNode {\n  const { data, isLoading, isSuccess } = result\n  const error = result.error as string | undefined\n\n  const {\n    loading: loadingNode = <CircularProgress />,\n    error: errorNode = <SyncError />,\n  } = options || {}\n\n  // An error occurred.\n  if (error) {\n    console.error(error)\n    return errorNode\n  }\n\n  // Busy calling the API.\n  if (isLoading) return loadingNode\n\n  // Called the API and got data.\n  if (data) return children(data)\n\n  // Called the API and did not get data.\n  if (isSuccess) throw Error(\"Expected to get data from API but got nothing.\")\n\n  // Have yet to call the API.\n  return loadingNode\n}\n\nexport function isSafeHttpMethod(method: string) {\n  // https://datatracker.ietf.org/doc/html/rfc9110.html#section-9.2.1\n  return [\"GET\", \"HEAD\", \"OPTIONS\", \"TRACE\"].includes(method.toUpperCase())\n}\n"],"names":["SyncError","jsxs","Stack","jsx","SyncProblemIcon","Typography","buildUrl","url","params","key","value","searchParams","values","isModelId","listTag","type","tagData","options","includeListTag","argKeysAreIds","id","tags","ids","list","getModelId","result","getNestedProperty","error","arg","modelUrls","detail","handleResultState","children","data","isLoading","isSuccess","loadingNode","CircularProgress","errorNode","isSafeHttpMethod","method"],"mappings":"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"}